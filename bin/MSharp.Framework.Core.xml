<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSharp.Framework.Core</name>
    </assembly>
    <members>
        <member name="T:MSharp.Framework.ClonedDocument">
            <summary>
            Created from a persisted Document to prevent unnecessary file loading when it's not actually changed.
            So that if an entity is being updated, while its original file is not changed,
            we don't do an unnecessary file operation.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Document">
            <summary> 
            Provides an utility for handling Binary property types.
            </summary>
        </member>
        <member name="F:MSharp.Framework.Document.ShouldSuppressPersistence">
            <summary>
            In Test projects particularly, having files save themselves on the disk can waste space.
            To prevent that, apply this setting in the config file.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MSharp.Framework.Document"/> class.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new Document instance with the specified data and file name.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.#ctor(System.String)">
            <summary>
            Initializes a new Document instance with the specified file name.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new Document instance, for the specified file on disk.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.GetOwnerPropertyReference">
            <summary>
            Gets the address of the property owning this document in the format: Type/ID/Property
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.OptimizeImage(System.Int32,System.Int32)">
            <summary>
            Optimizes the image based on the settings in the arguments.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.OptimizeImage(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Optimizes the image based on the settings in the arguments.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.Empty">
            <summary>
            Gets an empty document object.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Document.FileData">
            <summary>
            Gets or sets the data of this document.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Document.FallbackPaths">
            <summary>
            Gets all fall-back paths for this Document
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.ToString">
            <summary>
            Gets the Url of this document.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.GetContentText">
            <summary>
            Gets the content
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSharp.Framework.Document.Url(MSharp.Framework.Document.AccessMode)">
            <summary>
            Gets a Url to this document.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.Url">
            <summary>
            Gets a Url to this document.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.UrlOr(System.String)">
            <summary>
            Returns the Url of this document, or the provided default Url if this is Empty.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.GetCacheSafeUrl">
            <summary>
            Gets a cache safe URL to this document.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.IsEmpty">
            <summary>
            Determines whether this is an empty document.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.HasValue">
            <summary>
            Determines whether this document has any content.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.Clone">
            <summary>
            Creates a clone of this document.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.Attach(MSharp.Framework.Entity,System.String)">
            <summary>
            Attaches this Document to a specific record's file property.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.Attach(MSharp.Framework.Entity,System.String,MSharp.Framework.Document.AccessMode)">
            <summary>
            Attaches this Document to a specific record's file property.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.Detach">
            <summary>
            Detaches this Document.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.Delete(System.Object,System.EventArgs)">
            <summary>
            Deletes this document from the disk.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.SaveOnDisk">
            <summary>
            Saves this file on the disk.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.GetMimeType">
            <summary>
            Gets the mime type based on the file extension.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.IsMedia">
            <summary>Determines if this document's file extension is for audio or video.</summary>
        </member>
        <member name="M:MSharp.Framework.Document.GetPhysicalFilesRoot(MSharp.Framework.Document.AccessMode)">
            <summary>
            Gets the physical path root.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.FromReference(System.String)">
            <summary>
             This will return the document object linked to the correct entity.
            </summary>
            <param name="reference">Expected format: Type/Id/Property.</param>
        </member>
        <member name="P:MSharp.Framework.Document.LocalPath">
            <summary>
            Gets the local physical path of this file.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.GetUnsafeExtensions">
            <summary>
            Gets a list of unsafe file extensions.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.HasUnsafeExtension">
            <summary>
            Determines whether the extension of this file is potentially unsafe.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.Or(MSharp.Framework.Document)">
            <summary>
            Gets this document if it has a value, otherwise another specified document.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.CompareTo(MSharp.Framework.Document)">
            <summary>
            Compares this document versus a specified other document.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Document.CompareTo(System.Object)">
            <summary>
            Compares this document versus a specified other document.
            </summary>
        </member>
        <member name="F:MSharp.Framework.DocumentStorageProviderFactory.Providers">
            <summary>
            This is to be configured in Global.asax if a different provider is needed for specific files.
            Example: MSharp.Framework.DocumentStorageProviderFactory.Add("Customer.Logo", new MySpecialStorageProvider);
            </summary>
        </member>
        <member name="M:MSharp.Framework.DocumentStorageProviderFactory.GetProvider(System.String)">
            <summary>
            In the format: {type}.{property} e.g. Customer.Logo.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.IPickyDocumentContainer">
            <summary>
            This interface can be implemented on any entity which has a property of type Document.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IPickyDocumentContainer.GetPhysicalFolderPath(MSharp.Framework.Document)">
            <summary>
            Gets the path to the physical folder containing files for the specified document property.
            If you don't need to implement this specific method, simply return NULL.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IPickyDocumentContainer.GetVirtualFolderPath(MSharp.Framework.Document)">
            <summary>
            Gets the URL to the virtual folder containing files for the specified document property.
            If you don't need to implement this specific method, simply return NULL.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IPickyDocumentContainer.GetFileNameWithoutExtension(MSharp.Framework.Document)">
            <summary>
            Gets the name of the file used for the specified document property, without extension.
            If you don't need to implement this specific method, simply return NULL.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IPickyDocumentContainer.GetFallbackPaths(MSharp.Framework.Document)">
            <summary>
            Gets the fallback paths for the specified document.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IPickyDocumentUrlContainer.GetUrl(MSharp.Framework.Document)">
            <summary>
            Gets the url of the specified document.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.AutomatedTask">
            <summary>
            Represents an instance of Automated task entity type.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.AutomatedTask.#ctor">
            <summary>
            Initializes a new instance of the AutomatedTask class.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.AutomatedTask.CurrentExecutionDuration">
            <summary>
            Gets the CurrentExecutionDuration property.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.AutomatedTask.CurrentStartTime">
            <summary>
            Gets or sets the value of CurrentStartTime on this Automated task instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.AutomatedTask.LastRunDuration">
            <summary>
            Gets the LastRunDuration property.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.AutomatedTask.LastRunEnd">
            <summary>
            Gets or sets the value of LastRunEnd on this Automated task instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.AutomatedTask.LastRunStart">
            <summary>
            Gets or sets the value of LastRunStart on this Automated task instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.AutomatedTask.Name">
            <summary>
            Gets or sets the value of Name on this Automated task instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.AutomatedTask.NextTry">
            <summary>
            Gets or sets the value of NextTry on this Automated task instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.AutomatedTask.RecordFailure">
            <summary>
            Gets or sets a value indicating whether this Automated task instance Record failure.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.AutomatedTask.RecordSuccess">
            <summary>
            Gets or sets a value indicating whether this Automated task instance Record success.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.AutomatedTask.Delay">
            <summary>
            Gets or sets the Delay of this AutomatedTask.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.AutomatedTask.SyncGroup">
            <summary>
            Gets or sets the SyncGroup of this AutomatedTask.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.AutomatedTask.Priority">
            <summary>
            Gets or sets the Priority of this AutomatedTask.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.AutomatedTask.ToString">
            <summary>
            Returns a textual representation of this Automated task.
            </summary>
            <returns>A string value that represents this Automated task instance.</returns>
        </member>
        <member name="M:MSharp.Framework.Services.AutomatedTask.ValidateProperties">
            <summary>
            Validates the data for the properties of this Automated task.
            It throws a ValidationException if an error is detected.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.AutomatedTask.#ctor(System.Action{MSharp.Framework.Services.AutomatedTask})">
            <summary>
            Creates a new AutomatedTask instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.AutomatedTask.Start">
            <summary>
            Starts this automated task.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.AutomatedTask.Restart">
            <summary>
            Restarts this task.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.AutomatedTaskStatus">
            <summary>
            Represents an instance of Automated Task Status entity type.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.AutomatedTaskStatus.Name">
            <summary>
            Gets or sets the value of Name on this Automated Task Status instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.AutomatedTaskStatus.ToString">
            <summary>
            Returns a textual representation of this Automated Task Status.
            </summary>
            <returns>A string value that represents this Automated Task Status instance.</returns>
        </member>
        <member name="M:MSharp.Framework.Services.AutomatedTaskStatus.#ctor(System.String)">
            <summary>
            Creates a new AutomatedTaskStatus instance.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.CsvReader">
            <summary>
            A data-reader style interface for reading Csv files.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.CsvReader.Read(MSharp.Framework.Document,System.Boolean,System.Int32)">
            <summary>
            Reads a CSV document into a data table. Note use the CastTo() method on the returned DataTable to gain fully-typed objects.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.CsvReader.Read(System.IO.FileInfo,System.Boolean,System.Int32)">
            <summary>
            Reads a CSV file into a data table. Note use the CastTo() method on the returned DataTable to gain fully-typed objects.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.CsvReader.ReadUsingOleDb(System.String,System.Boolean)">
            <summary>
            Reads a CSV piece of string into a data table using OleDb. Note use the CastTo() method on the returned DataTable to gain fully-typed objects.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.CsvReader.Read(System.String,System.Boolean,System.Int32)">
            <summary>
            Reads a CSV piece of string into a data table. Note use the CastTo() method on the returned DataTable to gain fully-typed objects.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.CsvReader.GetColumns(MSharp.Framework.Document)">
            <summary>
            Gets the column names on the specified CSV document.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.CsvReader.GetColumns(System.String)">
            <summary>
            Gets the column names on the specified CSV content.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IImapMessage.Attachments">
            <summary>
            Each attachment will be XML in the form of:<para>&#160;</para> <para> &lt;Attachment FileName=&quot;myFile.pdf&quot;&gt;</para>
            <para>&#160;&#160;&#160;&#160;&lt;Bytes&gt;Base64 here&lt;/Bytes&gt;</para>
            <para>&lt;/Attachment&gt;</para>
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailExtensions.GetPlaceholderTokens(MSharp.Framework.Services.IEmailTemplate)">
            <summary>
            Gets the mandatory placeholder tokens for this template.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailExtensions.EnsurePlaceholders(MSharp.Framework.Services.IEmailTemplate)">
            <summary>
            Ensures the mandatory placeholders are all specified in this template.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailExtensions.MergeSubject(MSharp.Framework.Services.IEmailTemplate,System.Object)">
            <summary>
            Merges the subjcet of this email template with the specified data.
            </summary>
            <param name="mergeData">An anonymouse object. All property names should correspond to the placeholder names.
            For example: new {FirstName = GetFirstName() , LastName = "john"}</param>
        </member>
        <member name="M:MSharp.Framework.Services.EmailExtensions.MergeBody(MSharp.Framework.Services.IEmailTemplate,System.Object)">
            <summary>
            Merges the body of this email template with the specified data.
            </summary>
            <param name="mergeData">An anonymouse object. All property names should correspond to the placeholder names.
            For example: new {FirstName = GetFirstName() , LastName = "john"}</param>
        </member>
        <member name="M:MSharp.Framework.Services.EmailExtensions.Merge(System.String,System.Object)">
            <summary>
            Merges the specified template with the provided.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailExtensions.Attach(MSharp.Framework.Services.IEmailQueueItem,MSharp.Framework.Document)">
            <summary>
            Attaches a file to this email.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailExtensions.Attach(MSharp.Framework.Services.IEmailQueueItem,System.String)">
            <summary>
            Attaches a file to this email.
            </summary>
            <param name="filePath">The path of the attachment file.
            This must be the physical path of a file inside the running application.</param>
        </member>
        <member name="M:MSharp.Framework.Services.EmailExtensions.Attach(MSharp.Framework.Services.IEmailQueueItem,System.Byte[],System.String,System.String,System.Boolean)">
            <summary>
            Attaches the specified byte array content to this email as an attachment.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailExtensions.Send(MSharp.Framework.Services.IEmailQueueItem)">
            <summary>
            Will send an email and returns true for successful sending.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailExtensions.RecordRetry(MSharp.Framework.Services.IEmailQueueItem)">
            <summary>
            Records an unsuccessful attempt to send this email.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.EmailService">
            <summary>
            Provides email sending services.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailService.GetAttachments(MSharp.Framework.Services.IEmailQueueItem)">
            <summary>
            Gets the Attachment objects to be attached to this email.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailService.GetLinkedResources(MSharp.Framework.Services.IEmailQueueItem)">
            <summary>
            Gets the Linked Resource objects to be attached to this email.
            </summary>
        </member>
        <member name="F:MSharp.Framework.Services.EmailService.EmailQueueItemFactory">
            <summary>
            Specifies a factory to instantiate EmailQueueItem objects.
            </summary>
        </member>
        <member name="F:MSharp.Framework.Services.EmailService.EmailDispatcher">
            <summary>
            Provides a message which can dispatch an email message.
            Returns whether the message was sent successfully.
            </summary>
        </member>
        <member name="E:MSharp.Framework.Services.EmailService.Sent">
            <summary>
            Occurs when the smtp mail message for this email is sent. Sender is the IEmailQueueItem instance that was sent.
            </summary>
        </member>
        <member name="E:MSharp.Framework.Services.EmailService.Sending">
            <summary>
            Occurs when the smtp mail message for this email is about to be sent.
            </summary>
        </member>
        <member name="E:MSharp.Framework.Services.EmailService.SendError">
            <summary>
            Occurs when an exception happens when sending an email. Sender parameter will be the IEmailQueueItem instance that couldn't be sent.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailService.OnSending(MSharp.Framework.Services.IEmailQueueItem,System.Net.Mail.MailMessage)">
            <summary>
            Raises the Sending event.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailService.OnSent(MSharp.Framework.Services.IEmailQueueItem,System.Net.Mail.MailMessage)">
            <summary>
            Raises the Sent event.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailService.SendAll">
            <summary>
            Tries to sends all emails.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailService.SendAll(System.String)">
            <summary>
            Tries to sends all emails.
            </summary>
            <param name="category">The category of the emails to send. Use "*" to indicate "all emails".</param>
        </member>
        <member name="M:MSharp.Framework.Services.EmailService.SendAll(System.TimeSpan)">
            <summary>
            Tries to sends all emails.
            </summary>
            <param name="delay">The time to wait in between sending each outstanding email.</param>
        </member>
        <member name="M:MSharp.Framework.Services.EmailService.SendAll(System.String,System.TimeSpan)">
            <summary>
            Tries to sends all emails.
            </summary>
            <param name="category">The category of the emails to send. Use "*" to indicate "all emails".</param>
        </member>
        <member name="M:MSharp.Framework.Services.EmailService.Send(MSharp.Framework.Services.IEmailQueueItem)">
            <summary>
            Will try to send the specified email and returns true for successful sending.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailService.GetSentEmails``1">
            <summary>
            Gets the email items which have been sent (marked as soft deleted).
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailService.CreateMailMessage(MSharp.Framework.Services.IEmailQueueItem)">
            <summary>
            Creates an SMTP mail message for a specified mail item.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.EmailService.CreateVCalendarView(System.String,System.DateTime,System.DateTime,System.String,System.String,System.String)">
            <summary>
            Creates a VCalendar text with the specified parameters.
            </summary>
            <param name="meetingUniqueIdentifier">This uniquely identifies the meeting and is used for changes / cancellations. It is recommended to use the ID of the owner object.</param>
        </member>
        <member name="T:MSharp.Framework.Services.IEmailQueueItem">
            <summary>
            Represents an email generated by the application.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.Body">
            <summary>
            Gets or sets the body of this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.Date">
            <summary>
            Gets or sets the Date of this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.EnableSsl">
            <summary>
            Gets or sets whether SSL is enabled.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.Html">
            <summary>
            Gets or sets whether this email is HTML.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.SenderAddress">
            <summary>
            Gets or sets the Sender Address of this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.SenderName">
            <summary>
            Gets or sets the Sender Name for this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.Subject">
            <summary>
            Gets or sets the Subject of this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.To">
            <summary>
            Gets or sets the recipient of this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.Attachments">
            <summary>
            Gets or sets the Attachments information for this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.Bcc">
            <summary>
            Gets or sets the Bcc recipients of this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.Cc">
            <summary>
            Gets or sets the Bcc recipients of this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.Retries">
            <summary>
            Gets or sets the number of times sending this email has been tried.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.VCalendarView">
            <summary>
            Gets or sets the VCalendar View of this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.Username">
            <summary>
            Gets or sets the Username to use for sending this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.Password">
            <summary>
            Gets or sets the Password to use for sending this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.SmtpHost">
            <summary>
            Gets or sets the Smtp host address to use for sending this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.SmtpPort">
            <summary>
            Gets or sets the Smtp port to use for sending this email.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailQueueItem.Category">
            <summary>
            Gets or sets the Category for sending this email.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.IEmailTemplate">
            <summary>
            Represents an instance of Email template entity type.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailTemplate.Body">
            <summary>
            Gets or sets the value of Body on this Email template instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailTemplate.Key">
            <summary>
            Gets or sets the value of Key on this Email template instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailTemplate.MandatoryPlaceholders">
            <summary>
            Gets or sets the value of MandatoryPlaceholders on this Email template instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IEmailTemplate.Subject">
            <summary>
            Gets or sets the value of Subject on this Email template instance.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.SecurePassword">
            <summary>
            Provides secure password hashing service based on PBKDF2. 
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.SecurePassword.Create(System.String)">
            <summary>
            Creates a salted PBKDF2 hash of the password.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.SecurePassword.Verify(System.String,System.String,System.String)">
            <summary>
            Validates a password given a hash of the correct one.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MSharp.Framework.Services.ExcelCell"/> class.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCell.Text">
            <summary>
            Gets or sets the text of this cell.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCell.Type">
            <summary>
            Gets or sets the type of this cell.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelCell.MatchStyle(MSharp.Framework.Services.ExcelCell)">
            <summary>
            Determines if this cell has the same style as the specifying one.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.ExcelCellStyle">
            <summary>
            Provides styles for excel cells.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelCellStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MSharp.Framework.Services.ExcelCellStyle" /> class.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCellStyle.Alignment">
            <summary>
            Gets or sets the horizontal alignment of this style.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCellStyle.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of this style.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCellStyle.Orientation">
            <summary>
            Gets or sets the cell orientation of this style.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCellStyle.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>        
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCellStyle.BackgroundColor">
            <summary>
            Gets or sets the background color of this style.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCellStyle.BorderColor">
            <summary>
            Gets or sets the border color of this style.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCellStyle.BorderWidth">
            <summary>
            Gets or sets the width of the border.
            </summary>        
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCellStyle.FontName">
            <summary>
            Gets or sets the font name of this style.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCellStyle.NumberFormat">
            <summary>
            Gets or sets the Number format of this style.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCellStyle.Bold">
            <summary>
            Gets or sets if font should be bold.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCellStyle.WrapText">
            <summary>
            Gets or sets if the text should be wrapped.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCellStyle.Italic">
            <summary>
            Gets or sets if font should be Italic.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelCellStyle.ForeColor">
            <summary>
            Gets or sets the background color of this style.
            </summary>
        </member>
        <member name="F:MSharp.Framework.Services.ExcelCellStyle.Settings">
            <summary>
            Gets or sets the Style of this ExcelColumn.
            Use ExcelExporter.Style.[Item] to add styles to this.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelCellStyle.Set(System.String,System.String)">
            <summary>
            Use ExcelExporter.Style.[Item] to add styles.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelCellStyle.GetStyleId">
            <summary>
            Gets a unique ID for this style.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter.#ctor(System.String)">
            <summary>
            Creates a new ExcelExporter instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new ExcelExporter instance.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.ExcelExporter.Output">
            <summary>
            Specifies the type of output file.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.ExcelColumn`1.UniqueId">
            <summary>
            Gets or sets a Workbook Unique integer ID to use for creating styles.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.ExcelColumn`1.#ctor(System.String,System.String)">
            <summary>
            Creates a new ExcelColumn instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.ExcelColumn`1.SetRowStyle(System.Action{MSharp.Framework.Services.ExcelCellStyle})">
            <summary>
            Sets the specified row style attribute.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.ExcelColumn`1.SetHeaderStyle(System.Action{MSharp.Framework.Services.ExcelCellStyle})">
            <summary>
            Sets the specified header style attribute.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.ExcelColumn`1.HeaderStyle">
            <summary>
            Gets or sets the style of this columns's header cell.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.ExcelColumn`1.RowStyle">
            <summary>
            Gets or sets the style of this columns's data cells.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.ExcelColumn`1.HeaderText">
            <summary>
            Gets or sets the HeaderText of this ExcelColumn.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.ExcelColumn`1.DataType">
            <summary>
            Gets or sets the Type of this ExcelColumn.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.ExcelColumn`1.Formula">
            <summary>
            Gets or sets the Formula of this ExcelColumn.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.ExcelColumn`1.GroupName">
            <summary>
            Gets or sets the group name of this ExcelColumn.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.ExcelColumn`1.Customize(System.Action{MSharp.Framework.Services.ExcelExporter{`0}.ExcelColumn{`1}})">
            <summary>
            Customizes this column.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.ExcelDropDownColumn`1.PossibleValues">
            <summary>
            enumeration items to select from
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.ExcelDropDownColumn`1.EnumerationName">
            <summary>
            Gets or sets the Name of this ExcelDropDownColumn.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.#ctor(System.String)">
            <summary>
            Creates a new ExcelExporter instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new ExcelExporter instance for a data table.
            It automatically configures the exporter for all columns and rows of the data table.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.DocumentName">
            <summary>
            Gets or sets the DocumentName of this ExcelExporter.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.HeaderBackGroundColor">
            <summary>
            Gets or sets the HeaderBackGroundColor of this ExcelExporter.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.HeaderFontName">
            <summary>
            Gets or sets the HeaderFontName of this ExcelExporter.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.HeaderGroupBackgroundColor">
            <summary>
            Gets or sets the HeaderGroupBackgroundColor of this ExcelExporter.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ExcelExporter`1.ExcludeHeader">
            <summary>
            Gets or sets the IncludeHeader of this ExcelExporter.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.AddColumn(System.String)">
            <summary>
            Adds a header cell.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.AddColumn(System.String,System.String)">
            <summary>
            Adds a header cell.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.AddColumn(System.String,System.String,System.Func{`0,System.Object})">
            <summary>
            Adds a header cell.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.RemoveColumn(System.String)">
            <summary>
            Removes the column with the specified header text.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.RemoveColumn(System.Int32)">
            <summary>
            Removes the column at the specified index.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.AddRow(System.Object[])">
            <summary>
            Adds a data row to the excel output.
            <param name="dataCells">Either ExcelCell instances or value objects.</param>
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.Generate(MSharp.Framework.Services.ExcelExporter.Output)">
            <summary>
            Generates the content of the output Excel file.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.GenerateDropDownSourceSheet(MSharp.Framework.Services.ExcelExporter{`0}.ExcelDropDownColumn{`0})">
            <summary>
            Generates Hidden Worksheets that contain Possible Values for each DropDown
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.GenerateDropDownDataValidation">
            <summary>
            DataValidation assigns a DropDown for each cell and restrics possible values to that drop down
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSharp.Framework.Services.ExcelExporter`1.GetFileExtension(MSharp.Framework.Services.ExcelExporter.Output)">
            <summary>
            Gets the file extension for a specified output format.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.GeoLocationService">
            <summary>
            Provides location services.
            </summary>
        </member>
        <member name="F:MSharp.Framework.Services.GeoLocationService.GoogleClientKeyProvider">
            <summary>
            By default it will return the config value of "Google.Maps.Api.Client.Key".
            You can redefine this function in your app to provide a dynamic way to obtain the key.
            </summary>
        </member>
        <member name="F:MSharp.Framework.Services.GeoLocationService.GoogleSignatureKeyProvider">
            <summary>
            By default it will return the config value of "Google.Maps.Api.Client.Signature".
            You can redefine this function in your app to provide a dynamic way to obtain the key.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.GeoLocationService.GetPostcodeLocation(System.String,System.String)">
            <summary>
             Gets the Geo Location of a specified postcode using Google API.
             This method has daily usage limit of 25000 calls.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.GeoLocationService.CalculateDistance(System.String,System.String,System.String)">
            <summary>
            Gets the distance between 2 locations in miles.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.GeoLocationService.CalculateTravelDistance(System.String,System.String,System.String)">
            <summary>
            Returns the traveling distance in miles using the Google Maps API.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.Globalization.GoogleAutodetectResponse">
            <summary>
            Response returned by Google API for each auto-detect language request
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.Globalization.GoogleAutodetectResponse.ISOCode">
            <summary>ISO Code</summary>
        </member>
        <member name="P:MSharp.Framework.Services.Globalization.GoogleAutodetectResponse.Confidence">
            <summary>Confidence [0;1] about the detection</summary>
        </member>
        <member name="P:MSharp.Framework.Services.Globalization.GoogleAutodetectResponse.Language">
            <summary>Language detected based on iso639-1</summary>
        </member>
        <member name="M:MSharp.Framework.Services.Globalization.GoogleAutodetectResponse.#ctor(System.String,System.Nullable{System.Double})">
            <summary>
            Initialize a new Google auto-detect response
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Globalization.TranslationDownloadedEventArgs.#ctor(System.String,MSharp.Framework.Services.Globalization.ILanguage,System.String)">
            <summary>
            Creates a new TranslationDownloadedEventArgs instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.Globalization.TranslationDownloadedEventArgs.Word">
            <summary>
            Gets or sets the Word of this TranslationDownloadedEventArgs.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.Globalization.TranslationDownloadedEventArgs.Language">
            <summary>
            Gets or sets the Language of this TranslationDownloadedEventArgs.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.Globalization.TranslationDownloadedEventArgs.Translation">
            <summary>
            Gets or sets the Translation of this TranslationDownloadedEventArgs.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.Globalization.Translator">
            <summary>
            Provides translation services.
            </summary>
        </member>
        <member name="F:MSharp.Framework.Services.Globalization.Translator.GOOGLE_TRANSLATE_QUERY_LENGTH">
            <summary>Length of the query without the phrase</summary>
        </member>
        <member name="F:MSharp.Framework.Services.Globalization.Translator.GOOGLE_TRANSLATE_LIMIT">
            <summary>Maximum number of characters for each request to Google API</summary>
        </member>
        <member name="F:MSharp.Framework.Services.Globalization.Translator.GOOGLE_PHRASE_LIMIT">
            <summary>Maximum number of characters for each phrase that can be sent to Google Translate</summary>
        </member>
        <member name="F:MSharp.Framework.Services.Globalization.Translator.GOOGLE_TERMS_OF_SERVICE_ABUSE_MESSAGE">
            <summary>Message returned by Google if suspected terms of service abuse.</summary>
        </member>
        <member name="F:MSharp.Framework.Services.Globalization.Translator.LINE_BREAK_HTML">
            <summary>HTML tag for a line break</summary>
        </member>
        <member name="F:MSharp.Framework.Services.Globalization.Translator.LINE_BREAK_UNICODE">
            <summary>Unicode value of a HTML line break</summary>
        </member>
        <member name="F:MSharp.Framework.Services.Globalization.Translator.GetCurrentLanguage">
            <summary>
            Gets the language of the current user from cookie.
            If no language is specified, then the default language will be used as configured in the database.
            </summary>
        </member>
        <member name="E:MSharp.Framework.Services.Globalization.Translator.TranslationRequested">
            <summary>
            Occurs when a translation is requested.
            </summary>
        </member>
        <member name="E:MSharp.Framework.Services.Globalization.Translator.TranslationDownloaded">
            <summary>
            Occurs when a word's translation is downloaded off the Internet.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Globalization.Translator.IsGoogleMisconfigured">
            <summary>Check the configuration status of Google Translate</summary>
        </member>
        <member name="M:MSharp.Framework.Services.Globalization.Translator.ReconfigureGoogleTranslate">
            <summary>Set the status of Google Translate as well configured</summary>
        </member>
        <member name="M:MSharp.Framework.Services.Globalization.Translator.GoogleTranslate(System.String,System.String,System.String)">
            <summary>
            Uses Google Translate service to translate a specified phrase to the specified language.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Globalization.Translator.GoogleAutodetectLanguage(System.String)">
            <summary>
            Detect the language of a phrase.
            The API can translate multiple piece of text in the same time, if needed create a function with parameter "params string phrase" and return a list of GoogleAutoDetectLanguage.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.IIntegrationQueueItem">
            <summary>
            Stores one item requested for processing via an external service.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IIntegrationQueueItem.IntegrationService">
            <summary>
            The name of the integration service used for processing this item.
            </summary>        
        </member>
        <member name="P:MSharp.Framework.Services.IIntegrationQueueItem.Request">
            <summary>
            The body of the request being sent to the integration service.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IIntegrationQueueItem.Response">
            <summary>
            The response generated by the remote service.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IIntegrationQueueItem.ErrorResponse">
            <summary>
            The error encountered in processing this item.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IIntegrationQueueItem.DatePicked">
            <summary>
            Specifies the date and time when this item was picked for processing.
            If it's null, it means this item has not been picked yet.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IIntegrationQueueItem.RequestDate">
            <summary>
            Specifies the date and time when this item was first requested and added to the queue.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IIntegrationQueueItem.ResponseDate">
            <summary>
            Specifies the date when the response was retrieved from the remote service.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.IntegrationManager">
            <summary>
            Provides services for integration services.
            </summary>
        </member>
        <member name="F:MSharp.Framework.Services.IntegrationManager.IntegrationServices">
            <summary>
            Key = TRequest|TResponse
            Value = TService
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IntegrationManager.Process(MSharp.Framework.Services.IIntegrationQueueItem)">
            <summary>
            Will find a Service Registered to process the item.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IntegrationManager.ProcessOutstandingItems">
            <summary>
             Uses the right Integration Service to process the outstanding items in all queues.
             This should be called as an Automated Task in the application.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IntegrationManager.ProcessOutstandingItems(System.String)">
            <summary>
             Uses the right Integration Service to process the next item in that queue.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IntegrationManager.Register``3">
            <summary>
            Registers an integration service.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IntegrationManager.Request``2(``0)">
            <summary>
            Inserts a queu item to call this service and waits until the item is processed.
            Then it will return the response.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IntegrationManager.RequestAsync``2(``0)">
            <summary>
            Inserts a request in the queue and immediately returns without waiting for a response.
            It will return the token string for this request, that can be queried later on for a response (using Await Response).
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IntegrationManager.AwaitResponse``1(System.String,System.Int32)">
            <summary>
            It will wait until a response is provided by another thread to the integration queue item specified by its token.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IntegrationManager.InjectResponse``2(``1)">
            <summary>
            Injects an asyncronous waiter which will inject the provided response for one potential future request.
            It will check every 5 milliseconds to see if a request item is inserted in the queue, and in that case respond to it.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IntegrationService`2.Request(`0)">
            <summary>
            Inserts a queu item to call this service and waits until the item is processed.
            Then it will return the response.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IntegrationService`2.RegisterImplementor``1">
            <summary>
            Registers an integration service implementor.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IntegrationService`2.InjectResponse(`1)">
            <summary>
            Injects an asyncronous waiter which will inject the provided response for one potential future request.
            It will check every 5 milliseconds to see if a request item is inserted in the queue, and in that case respond to it.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IntegrationService`2.AwaitResponse(System.String,System.Int32)">
            <summary>
            It will wait until a response is provided by another thread to the integration queue item specified by its token.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IntegrationService`2.RequestAsync(`0)">
            <summary>
            Inserts a request in the queue and immediately returns without waiting for a response.
            It will return the token string for this request, that can be queried later on for a response (using Await Response).
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IServiceImplementor`2.GetResponse(`0)">
            <summary>
            It will process the specified request, send it to the remote service, and return the response.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.TemporaryFilePath">
            <summary>
            This class provides a unique file path in a temporary folder (i.e. in the application temp folder
            in the system by default and can be provided in Config of the application through a setting with key "Application.TemporaryFilesPath")
            After this instance is disposed any possibly created file in the path will be deleted physically.
            
            If this class fails to dispose an application event will be added to the projects database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.TemporaryFilePath.#ctor">
            <summary>
            Creates a new instance of temporary file. The file will have "dat" extension by default.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.TemporaryFilePath.#ctor(System.String)">
            <summary>
            Creates a new instance of temporary file.
            with the given extension. Extension can either have "." or not
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.TemporaryFilePath.GetTemporaryFileFolder">
            <summary>
            Finds a proper folder path for temporary files
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.TemporaryFilePath.FilePath">
            <summary>
            Gets or sets the FilePath of this TemporaryFile.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.TemporaryFilePath.Dispose">
            <summary>
            Disposes this instance of temporary file and deletes the file if provided
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.PessimisticJsonConverter">
            <summary>
            When serializing objects it ignores all properties unless they have [Exposed] attribute.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.PdfService">
            <summary>
            Provides PDF services.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.PdfService.CreateHtml2PdfConverter">
            <summary>
            Creates an instance of Html 2 PDF converter service.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Profiler.#ctor(System.String)">
            <summary>
            Creates a new Profiler instance.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.ISmsQueueItem">
            <summary>
            Represents a sendable SMS item generated by the application.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ISmsQueueItem.Date">
            <summary>
            Gets or sets the date this SMS should be sent.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ISmsQueueItem.DateSent">
            <summary>
            Gets or sets the date when this SMS was successfully sent.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ISmsQueueItem.SenderName">
            <summary>
            Gets or sets the Sender Name.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ISmsQueueItem.Text">
            <summary>
            Gets or sets the SMS text.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ISmsQueueItem.To">
            <summary>
            Gets or sets the SMS recipient number.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.ISmsQueueItem.Retries">
            <summary>
            Gets or sets the number of times sending this email has been tried.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.ISMSSender">
            <summary>
            Represents a component that actually delivers SMS messages.
            This should be implemented for any 3rd party SMS gateway.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.ISMSSender.Deliver(MSharp.Framework.Services.ISmsQueueItem)">
            <summary>
            Delivers the specified SMS message.
            The implementation of this method should not handle exceptions. Any exceptions will be logged by the engine.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.SmsExtensions.RecordRetry(MSharp.Framework.Services.ISmsQueueItem)">
            <summary>
            Records an unsuccessful attempt to send this SMS.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.SmsExtensions.MarkSent(MSharp.Framework.Services.ISmsQueueItem)">
            <summary>
            Updates the DateSent field of this item and then soft deletes it.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.SmsExtensions.Send(MSharp.Framework.Services.ISmsQueueItem)">
            <summary>
            Sends the specified SMS item.
            It will try several times to deliver the message. The number of retries can be specified in AppConfig of "SMS.Maximum.Retries".
            If it is not declared in web.config, then 3 retires will be used.
            Note: The actual SMS Sender component must be implemented as a public type that implements ISMSSender interface.
            The assembly qualified name of that component, must be specified in AppConfig of "SMS.Sender.Type".
            </summary>
        </member>
        <member name="E:MSharp.Framework.Services.SmsService.SendError">
            <summary>
            Occurs when an exception happens when sending an sms. Sender parameter will be the ISmsQueueItem instance that couldn't be sent.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.SmsService.Send(MSharp.Framework.Services.ISmsQueueItem)">
            <summary>
            Sends the specified SMS item.
            It will try several times to deliver the message. The number of retries can be specified in AppConfig of "SMS.Maximum.Retries".
            If it is not declared in web.config, then 3 retires will be used.
            Note: The actual SMS Sender component must be implemented as a public type that implements ISMSSender interface.
            The assembly qualified name of that component, must be specified in AppConfig of "SMS.Sender.Type".
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.ISortable">
            <summary>
            Represents a sortable entity type.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.Sorter">
            <summary>
            Provides Sorting services for all entities.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Sorter.MoveBefore(MSharp.Framework.Services.ISortable,MSharp.Framework.Services.ISortable,MSharp.Framework.SaveBehaviour)">
            <summary>
            Moves this item before a specified other item. If null is specified, it will be moved to the end of its siblings.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Sorter.MoveAfter(MSharp.Framework.Services.ISortable,MSharp.Framework.Services.ISortable,MSharp.Framework.SaveBehaviour)">
            <summary>
            Moves this item after a specified other item. If null is specified, it will be moved to the beginning of its siblings.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Sorter.MoveUp(MSharp.Framework.Services.ISortable,MSharp.Framework.SaveBehaviour)">
            <summary>
            Moves an item up among its siblings. Returns False if the item is already first in the list, otherwise true.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Sorter.MoveFirst(MSharp.Framework.Services.ISortable,MSharp.Framework.SaveBehaviour)">
            <summary>
            Moves an item up to first among its siblings. Returns False if the item is already first in the list, otherwise true.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Sorter.MoveLast(MSharp.Framework.Services.ISortable,MSharp.Framework.SaveBehaviour)">
            <summary>
            Moves an item up to last among its siblings. Always returns true.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Sorter.MoveDown(MSharp.Framework.Services.ISortable,MSharp.Framework.SaveBehaviour)">
            <summary>
            Moves an item down among its siblings. Returns False if the item is already last in the list, otherwise true.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Sorter.Swap(MSharp.Framework.Services.ISortable,MSharp.Framework.Services.ISortable,MSharp.Framework.SaveBehaviour)">
            <summary>
            Swaps the order of two specified items.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Sorter.JustifyOrders(MSharp.Framework.Services.ISortable,MSharp.Framework.SaveBehaviour)">
            <summary>
            Justifies the order of a specified item and its siblings. 
            The value of the "Order" property in those objects will be 10, 20, 30, ...
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Sorter.FindSiblings(MSharp.Framework.Services.ISortable)">
            <summary>
            Discovers the siblings of the specified sortable object.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.Sorter.GetNewOrder(MSharp.Framework.Services.ISortable)">
            <summary>
            Gets the Next order for an ISortable entity.
            The result will be 10 plus the largest order of its siblings.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.IdentifierGenerator">
            <summary>
            Generates an identifier for a given string value.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Services.IdentifierGenerator.Value">
            <summary>
            Gets or sets the Value of this IdentifierGenerator.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IdentifierGenerator.#ctor(System.String)">
            <summary>
            Creates a new IdentifierGenerator instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.IdentifierGenerator.Build">
            <summary>
            Builds the identifer
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.XmlProperties.#ctor(System.String)">
            <summary>
            Creates a new XmlProperties instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.XmlProperties.#ctor">
            <summary>
            Creates a new XmlProperties instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.XmlProperties.ToString">
            <summary>
            Returns the XML representation of this instance.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.XmlSerialization">
            <summary>
            Provides services for object XML serialization.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.XmlSerialization.Serialize(System.Object,System.Boolean)">
            <summary>
            Generates an XML text equivalent of the specified object.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.XmlSerialization.Deserialize``1(System.String,System.Boolean,System.String)">
            <summary>
            Converts the specified xml text into an instance of T.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Services.HttpContextCache">
            <summary>
            Provides a HttpRequest level cache of objects.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.HttpContextCache.GetOrAdd``2(``0,System.Func{``1})">
            <summary>
            Gets a specified cached value from the current HttpContext.
            If it doesn't exist, it will evaluate the provider expression to produce the value, adds it to cache, and returns it.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Services.HttpContextCache.Remove``1(``0)">
            <summary>
            Removes a specified cached object by its key from the current Http Context.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Data.DataAccessor`2">
            <summary>
            ADO.NET Facade for submitting single method commands.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DataAccessor`2.CreateConnection(System.String)">
            <summary>
            Creates a new DB Connection to database with the given connection string.
            </summary>		
        </member>
        <member name="M:MSharp.Framework.Data.DataAccessor`2.CreateConnection">
            <summary>
            Creates a connection object.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DataAccessor`2.CreateActualConnection">
            <summary>
            Creates a connection object.
            </summary>       
        </member>
        <member name="M:MSharp.Framework.Data.DataAccessor`2.ExecuteNonQuery(System.String)">
            <summary>
            Executes the specified command text as nonquery.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DataAccessor`2.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes the specified command text as nonquery.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DataAccessor`2.ExecuteNonQuery(System.Data.CommandType,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Data.IDataParameter[]}})">
            <summary>
            Executes the specified command text as nonquery.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DataAccessor`2.ExecuteReader(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes the specified command text against the database connection of the context and builds an IDataReader.
            Make sure you close the data reader after finishing the work.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DataAccessor`2.ExecuteScalar``1(System.String)">
            <summary>
            Executes the specified command text against the database connection of the context and returns the single value of the type specified.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DataAccessor`2.ExecuteScalar(System.String)">
            <summary>
            Executes the specified command text against the database connection of the context and returns the single value.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DataAccessor`2.ExecuteScalar(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes the specified command text against the database connection of the context and returns the single value.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DataAccessor`2.ReadData(System.String,System.Data.IDataParameter[])">
            <summary>
            Executes a database query and returns the result as a data set.
            </summary>        
        </member>
        <member name="M:MSharp.Framework.Data.DataAccessor`2.ReadData(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes a database query and returns the result as a data set.
            </summary>        
        </member>
        <member name="T:MSharp.Framework.Data.DataAccessor">
            <summary>
            Provides a DataAccessor implementation for System.Data.SqlClient 
            </summary>
        </member>
        <member name="T:MSharp.Framework.Data.DataAccessProfiler">
            <summary>
            Provides SQL profiling services.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DataAccessProfiler.GenerateReport(System.Boolean)">
            <summary>
            To invoice this you can send a request to the application using http://...?Web.Test.Command=Sql.Profile&amp;Mode=Snapshot
            </summary>
            <param name="snapshot">Determines whether the current log data should be removed (false) or kept for future combined future generated (true).</param>
        </member>
        <member name="T:MSharp.Framework.Data.Ado.Net.DataProvider`3">
            <summary>
            Provides a DataProvider for accessing data from the database using ADO.NET.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.ExecuteNonQuery(System.String)">
            <summary>
            Executes the specified command text as nonquery.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes the specified command text as nonquery.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.ExecuteNonQuery(System.Data.CommandType,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Data.IDataParameter[]}})">
            <summary>
            Executes the specified command text as nonquery.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.ExecuteReader(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes the specified command text against the database connection of the context and builds an IDataReader.  Make sure you close the data reader after finishing the work.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.ExecuteScalar(System.String)">
            <summary>
            Executes the specified command text against the database connection of the context and returns the single value.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.ExecuteScalar(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes the specified command text against the database connection of the context and returns the single value.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a data parameter with the specified name and value.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Creates a data parameter with the specified name and value and type.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.Delete(MSharp.Framework.IEntity)">
            <summary>
            Deletes the specified record.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.Get(System.Object)">
            <summary>
            Gets the specified record by its type and ID.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.ReadManyToManyRelation(MSharp.Framework.IEntity,System.String)">
            <summary>
            Reads the many to many relation.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.Save(MSharp.Framework.IEntity)">
            <summary>
            Saves the specified record.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.GenerateParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates data provider specific parameters for the specified data items.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.GenerateParameter(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Generates a data provider specific parameter for the specified data.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.Ado.Net.DataProvider`3.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key used for this data provider.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Ado.Net.DataProvider`3.GetAssociationInclusionCriteria(MSharp.Framework.Data.DatabaseQuery,System.Reflection.PropertyInfo)">
            <summary>
            Returns a direct database criterion used to eager load associated objects.
            Gets the list of specified records.
            </summary>        
        </member>
        <member name="P:MSharp.Framework.Data.Ado.Net.DataProvider`3.ConnectionString">
            <summary>
            Gets or sets the connection string key used for this data provider.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Data.Ado.Net.InterfaceDataProvider">
            <summary>
            Provides data access for Interface types.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Data.Ado.Net.SqlDataProvider">
            <summary>
            Provides a DataProvider for accessing data from the database using ADO.NET based on the SqlClient provider.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DbTransactionScope.OnTransactionCompleted(System.Action)">
            <summary>
            Attaches an event handler to be invoked when the current (root) transaction is completed.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DbTransactionScope.OnTransactionRolledBack(System.Action)">
            <summary>
            Attaches an event handler to be invoked when the current (root) transaction is completed.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Data.Criterion">
            <summary>
            A basic implementation of a database query criterion.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Criterion.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MSharp.Framework.Data.Criterion"/> class.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Criterion.#ctor(System.String,MSharp.Framework.Data.FilterFunction,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MSharp.Framework.Data.Criterion"/> class.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Criterion.#ctor(System.String,MSharp.Framework.Data.FilterFunction,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:MSharp.Framework.Data.Criterion"/> class.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Criterion.#ctor(System.String,MSharp.Framework.Data.FilterFunction,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MSharp.Framework.Data.Criterion"/> class.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Criterion.#ctor(System.String,MSharp.Framework.Data.FilterFunction,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:MSharp.Framework.Data.Criterion"/> class.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Criterion.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MSharp.Framework.Data.Criterion"/> class.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.Criterion.PropertyName">
            <summary>
            Gets or sets the PropertyName of this Condition.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.Criterion.SqlCondition">
            <summary>
            Gets or sets the SqlCondition of this Condition.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.Criterion.FilterFunction">
            <summary>
            Gets or sets the Filter Option of this Condition.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.Criterion.Value">
            <summary>
            Gets or sets the Value of this Condition.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Criterion.GetSerializedValue">
            <summary>
            Gets a text representation of the value.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Criterion.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Criterion.Parse(System.String)">
            <summary>
            Parses the specified condition string.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DatabaseQuery`1.Aggregate``2(MSharp.Framework.Data.QueryAggregateFunction,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets a list of entities of the given type from the database with the specified type matching the specified criteria.
            If no criteria is specified, the count of all instances will be returned.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Data.DirectDatabaseCriterion">
            <summary>
            Enables adding a direct SQL WHERE criteria to the database query.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DirectDatabaseCriterion.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MSharp.Framework.Data.DirectDatabaseCriterion" /> class.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DirectDatabaseCriterion.#ctor(System.String,System.Tuple{System.String,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:MSharp.Framework.Data.DirectDatabaseCriterion" /> class.
            </summary>
            <param name="parameters">Item1 = Parameter name (without the @ character). Item2 = parameter value.</param>
        </member>
        <member name="M:MSharp.Framework.Data.DirectDatabaseCriterion.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MSharp.Framework.Data.DirectDatabaseCriterion" /> class.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DirectDatabaseCriterion.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MSharp.Framework.Data.DirectDatabaseCriterion" /> class.
            </summary>
            <param name="parameters">Example: new {Parameter1 = SomeValue(), Parameter2 = AnotherValue()}</param>
        </member>
        <member name="F:MSharp.Framework.Data.DirectDatabaseCriterion.Parameters">
            <summary>
            Gets the parameters used in the specified custom SQL criteria.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.DirectDatabaseCriterion.SqlCriteria">
            <summary>
            Gets or sets the SQL criteria.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.DirectDatabaseCriterion.Value">
            <summary>
            N/A.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.DirectDatabaseCriterion.IsCacheSafe">
            <summary>
            Specifies whether this criteria is compatible with normal caching.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.DirectDatabaseCriterion.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.DirectDatabaseCriterion.FilterFunction">
            <summary>
            N/A.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Data.FilterFunction">
            <summary>
            Provides options for filter functions.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.FilterFunctionServices.GetDatabaseOperator(MSharp.Framework.Data.FilterFunction)">
            <summary>
            Gets the database operator equivalent for this filter option.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.QueryOptions.FullTextSearchQueryOption.#ctor">
            <summary>
            Creates a new FullTextIndexQueryOption instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.QueryOptions.FullTextSearchQueryOption.Keyword">
            <summary>
            Gets or sets the Keywords of this FullTextIndexQueryOption.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.QueryOptions.FullTextSearchQueryOption.Properties">
            <summary>
            Gets or sets the Properties of this FullTextIndexQueryOption.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Data.ICriterion">
            <summary>
            Provides an abstraction for database query criteria.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.PagingQueryOption.#ctor">
            <summary>
            Creates a new ResultSetSizeQueryOption instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.PagingQueryOption.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new ResultSetSizeQueryOption instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.PagingQueryOption.OrderBy">
            <summary>
            The direct SQL sort expression. E.g: MyColumn DESC, Something 
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.QueryOption.FullTextSearch(System.String,System.String[])">
            <summary>
            Creates a FullTextSearch option for the search query.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.ResultSetSizeQueryOption.#ctor">
            <summary>
            Creates a new ResultSetSizeQueryOption instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.ResultSetSizeQueryOption.Number">
            <summary>
            Gets or sets the Number of this ResultSetSizeQueryOption.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.SortQueryOption.#ctor">
            <summary>
            Creates a new SortQueryOption instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.SortQueryOption.Property">
            <summary>
            Gets or sets the Property of this SortQueryOption.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.SortQueryOption.Descending">
            <summary>
            Gets or sets the Descending of this SortQueryOption.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Data.Cache">
            <summary>
            Provides a cache of objects retrieved from the database.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.Cache.Current">
            <summary>
            Gets the current cache.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Cache.Get(System.String)">
            <summary>
            Gets an entity from cache. Returns null if not found.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Cache.Get``1(System.Object)">
            <summary>
            Gets an entity from cache. Returns null if not found.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Cache.Get(System.Type,System.String)">
            <summary>
            Gets an entity from cache. Returns null if not found.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Cache.Add(MSharp.Framework.IEntity)">
            <summary>
            Adds a given entity to the cache.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Cache.Remove(MSharp.Framework.IEntity)">
            <summary>
            Removes a given entity from the cache.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.Cache.Remove(System.Type,System.Boolean)">
            <summary>
            Removes all entities of a given types from the cache.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.DataProviderModelConfigurationSection.SyncFilePath">
            <summary>
            Gets or sets the SyncFilePath of this DataProviderModelConfigurationSection.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Data.DataProviderModelConfigurationSection.FileDependancyPath">
            <summary>
            Gets or sets the SyncFilePath of this DataProviderModelConfigurationSection.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Data.EntityFinder">
            <summary>
            Finds an entity with unknown type from its given id.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.EntityFinder.GetEntityType(System.String)">
            <summary>
            Gets the runtime type from the currently loaded assemblies.
            </summary>
            <param name="typeFullName">The type name (including namespace, but excluding assembly).</param>
        </member>
        <member name="M:MSharp.Framework.Data.ExternalCacheDependancy.CreateDependancy(System.String)">
            <summary>
            Creates a watcher on the current cache.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.IDataProvider.ReadManyToManyRelation(MSharp.Framework.IEntity,System.String)">
            <summary>
            Reads the many to many relation and returns the IDs of the associated objects.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Data.IDataProviderFactory.SupportsPolymorphism">
            <summary>
            Determines whether this data provider factory handles interface data queries.
            </summary>
        </member>
        <member name="P:MSharp.Framework.DatabaseContext.ConnectionString">
            <summary>
            Gets or sets the ConnectionString of this DatabaseContext.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Database">
            <summary>
            Data access code for Application components.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Count``1(MSharp.Framework.Data.Criterion[])">
            <summary>
            Gets a list of entities of the given type from the database with the specified type matching the specified criteria.
            If no criteria is specified, the count of all instances will be returned.
            </summary>        
        </member>
        <member name="M:MSharp.Framework.Database.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MSharp.Framework.Data.QueryOption[])">
            <summary>
            Gets a list of entities of the given type from the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Refresh">
            <summary>
            Clears the cache of all items.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.EnlistOrCreateTransaction(System.Action)">
            <summary>
            If there is an existing open transaction, it will simply run the specified action in it, Otherwise it will create a new transaction.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Parse``1(System.String,System.Boolean)">
            <summary>
            Returns the first record of the specified type of which ToString() would return the specified text .
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.CountAllObjectsInCache">
            <summary>
            Gets the total number of objects in cache.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Reload``1(``0@)">
            <summary>
            Reloads a specified instance from database. This should be used when an object in memory is not synscronized with the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Reload``1(``0)">
            <summary>
            Gets a reloaded instance from the database to get a synced copy.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Any``1">
            <summary>
            Determines if there is any object in the database of the specified type.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Any``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Determines if there is any object in the database of the specified type matching a given criteria.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.None``1">
            <summary>
            Determines whether there is no object of the specified type in the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.None``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Determines whether none of the objects in the database match a given criteria.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Delete(MSharp.Framework.IEntity)">
            <summary>
            Deletes the specified record from the data repository.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Delete(MSharp.Framework.IEntity,MSharp.Framework.DeleteBehaviour)">
            <summary>
            Deletes the specified record from the data repository.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Deletes the specified instances from the data repository.        
            The operation will be done in a transaction.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.DeleteAll``1">
            <summary>
            Deletes all objects of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MSharp.Framework.Database.DeleteAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Deletes all objects of the specified type matching the given criteria.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.UpdateAll``1(System.Action{``0})">
            <summary>
            Updates all records in the database with the specified change.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.FindWithMax``1(System.Func{``0,System.Object})">
            <summary>
            Finds the object with maximum value of the specified property.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.FindWithMin``1(System.Func{``0,System.Object})">
            <summary>
            Finds the object with minimum value of the specified property.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Find``1(MSharp.Framework.Data.Criterion[])">
            <summary>
            Find an object with the specified type from the database.
            When used with no criteria, returns the first object found of the specified type.
            If not found, it returns null.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Find an object with the specified type from the database.
            When used with no criteria, returns the first object found of the specified type.
            If not found, it returns null.
            </summary>
            <param name="orderBy">The order by expression to run at the database level. It supports only one property.</param>
            <param name="desc">Specified whether the order by is descending.</param>
        </member>
        <member name="M:MSharp.Framework.Database.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MSharp.Framework.Data.QueryOption[])">
            <summary>
            Finds an object with the specified type matching the specified criteria.
            If not found, it returns null.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Get``1(System.String)">
            <summary>
            Gets an Entity of the given type with the given Id from the database.
            If it can't find the object, an exception will be thrown.
            </summary>        
            <param name="entityId">The primary key value of the object to load in string format.</param>
        </member>
        <member name="M:MSharp.Framework.Database.Get``1(System.Guid)">
            <summary>
            Get an entity with the given type and ID from the database.
            If it can't find the object, an exception will be thrown.
            </summary>
            <typeparam name="T">The type of the object to get</typeparam>
            <param name="id">The primary key value of the object to load.</param>
        </member>
        <member name="M:MSharp.Framework.Database.Get``1(System.Nullable{System.Guid})">
            <summary>
            Get an entity with the given type and ID from the database.
            If it can't find the object, an exception will be thrown.
            </summary>
            <typeparam name="T">The type of the object to get</typeparam>
            <param name="id">The primary key value of the object to load.</param>
        </member>
        <member name="M:MSharp.Framework.Database.Get``1(System.Nullable{System.Int32})">
            <summary>
            Get an entity with the given type and ID from the database.
            If it can't find the object, an exception will be thrown.
            </summary>
            <typeparam name="T">The type of the object to get</typeparam>
            <param name="id">The primary key value of the object to load.</param>
        </member>
        <member name="M:MSharp.Framework.Database.Get(System.Guid,System.Type)">
            <summary>
            Get an entity with the given type and ID from the database.
            If it can't find the object, an exception will be thrown.
            </summary>
            <param name="entityID">The primary key value of the object to load.</param>
        </member>
        <member name="M:MSharp.Framework.Database.Get(System.Object,System.Type)">
            <summary>
            Get an entity with the given type and ID from the database.
            If it can't find the object, an exception will be thrown.
            </summary>
            <param name="entityID">The primary key value of the object to load.</param>
        </member>
        <member name="M:MSharp.Framework.Database.GetOrDefault``1(System.Object)">
            <summary>
            Get an entity with the given type and ID from the database.
            If the key does not exist, it will return null, rather than throwing an exception.
            </summary>
            <typeparam name="T">The type of the object to get</typeparam>
            <param name="id">The primary key value of the object to load.</param>
        </member>
        <member name="M:MSharp.Framework.Database.GetOrDefault(System.Object,System.Type)">
            <summary>
            Get an entity with the given type and ID from the database.
            If the key does not exist, it will return null, rather than throwing an exception.
            </summary>
            <param name="type">The type of the object to get</param>
            <param name="id">The primary key value of the object to load.</param>        
        </member>
        <member name="E:MSharp.Framework.Database.GettingList">
            <summary>
            This is invoked for every Database.GetList() call. You can use this to inject additional criteria or query options globally.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.GetList``1(System.Collections.Generic.IEnumerable{MSharp.Framework.Data.ICriterion})">
            <summary>
            Returns a list of entities with the specified type.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.GetList``1">
            <summary>
            Gets a list of entities of the given type from the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.GetList``1(MSharp.Framework.Data.QueryOption[])">
            <summary>
            Returns a list of entities with the specified type.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.GetList``1(System.Collections.Generic.IEnumerable{MSharp.Framework.Data.ICriterion},MSharp.Framework.Data.QueryOption[])">
            <summary>
            Returns a list of entities with the specified type.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.GetList``1(MSharp.Framework.Data.Criterion[])">
            <summary>
            Gets the list of objects with the specified type matching the specified criteria.
            If no criteria is specified, all instances will be returned.
            </summary>        
        </member>
        <member name="M:MSharp.Framework.Database.GetList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets a list of entities of the given type from the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.GetList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Gets a list of entities of the given type from the database.
            </summary>
            <param name="orderBy">The order by expression to run at the database level. It supports only one property.</param>
            <param name="desc">Specified whether the order by is descending.</param>
        </member>
        <member name="M:MSharp.Framework.Database.GetList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MSharp.Framework.Data.QueryOption[])">
            <summary>
            Gets a list of entities of the given type from the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.GetList``1(System.Collections.Generic.IEnumerable{MSharp.Framework.Data.Criterion})">
            <summary>
            Returns a list of entities with the specified type.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.GetList``1(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets the list of T objects from their specified IDs.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.GetList(System.Type,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets the list of objects from their specified IDs.
            </summary>
        </member>
        <member name="E:MSharp.Framework.Database.Updated">
            <summary>
            It's raised when any record is saved or deleted in the system.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.GetRegisteredAssemblies">
            <summary>
            Gets the assemblies for which a data provider factory has been registered in the current domain.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.CreateTransactionScope(MSharp.Framework.Data.DbTransactionScopeOption)">
            <summary>
            Creates a transaction scope.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Save``1(``0)">
            <summary>
            Inserts or updates an object in the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Save(MSharp.Framework.IEntity,MSharp.Framework.SaveBehaviour)">
            <summary>
            Inserts or updates an object in the database.
            </summary>        
        </member>
        <member name="M:MSharp.Framework.Database.Save``1(System.Collections.Generic.List{``0})">
            <summary>
            Saves the specified records in the data repository.
            The operation will run in a Transaction.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Update``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Runs an update command on a list of given objects and persists the updated objects in database.
            It returns the updated instances.
            </summary>
            <param name="items">The objects to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.Property = "Value"</param>
        </member>
        <member name="M:MSharp.Framework.Database.Update``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},MSharp.Framework.SaveBehaviour)">
            <summary>
            Runs an update command on a list of given objects and persists the updated objects in database.
            It returns the updated instances.
            </summary>
            <param name="items">The objects to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.Property = "Value"</param>
        </member>
        <member name="M:MSharp.Framework.Database.Update``1(``0,System.Action{``0})">
            <summary>
            Runs an update command on a given object's clone and persists the updated object in database. It returns the updated instance.
            </summary>
            <param name="item">The object to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.Property = "Value"</param>
        </member>
        <member name="M:MSharp.Framework.Database.Update``1(``0,System.Action{``0},MSharp.Framework.SaveBehaviour)">
            <summary>
            Runs an update command on a given object's clone and persists the updated object in database. It returns the updated instance.
            </summary>
            <param name="item">The object to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.Property = "Value"</param>
        </member>
        <member name="M:MSharp.Framework.Database.BulkInsert(MSharp.Framework.Entity[],System.Int32,System.Boolean)">
            <summary>
            Inserts the specified objects in bulk. None of the object events will be triggered.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.BulkUpdate(MSharp.Framework.Entity[],System.Int32,System.Boolean)">
            <summary>
            Updates the specified objects in bulk. None of the object events will be triggered.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Save``1(``0[])">
            <summary>
            Saves the specified records in the data repository.
            The operation will run in a Transaction.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Save``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Saves the specified records in the data repository.
            The operation will run in a Transaction.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Database.Save``1(System.Collections.Generic.IEnumerable{``0},MSharp.Framework.SaveBehaviour)">
            <summary>
            Saves the specified records in the data repository.
            The operation will run in a Transaction.
            </summary>
        </member>
        <member name="T:MSharp.Framework.SessionMemory">
            <summary>
            A repository of transient records in the user's session memory.
            </summary>
        </member>
        <member name="M:MSharp.Framework.SessionMemory.ClearOldObjects">
            <summary>
            Clears the old objects in session memory.
            </summary>
        </member>
        <member name="M:MSharp.Framework.SessionMemory.ClearOldObjects(System.TimeSpan)">
            <summary>
            Clears the old objects in session memory. This method is meant to be called periodically every few minutes.
            </summary>
            <param name="maxAge">The maximum age allowed to live in the memory. Any objects added before the specified time span will be cleared.</param>
        </member>
        <member name="P:MSharp.Framework.SessionMemory.Current">
            <summary>
            Gets the current instance of the session memory, specific to the current ASP.NET user (or "Current Thread" when ASP.NET session is not available in the current context).
            </summary>
        </member>
        <member name="M:MSharp.Framework.SessionMemory.Get``1(System.Guid)">
            <summary>
            Gets a record from the session memory by its specified ID.        
            </summary>
        </member>
        <member name="M:MSharp.Framework.SessionMemory.Get(System.Type,System.Object)">
            <summary>
            Gets a record from the session memory by its specified ID and Type.        
            </summary>
        </member>
        <member name="M:MSharp.Framework.SessionMemory.GetList``1">
            <summary>
            Gets a list of objects of the specified type, matching the specified criteria.
            </summary>
        </member>
        <member name="M:MSharp.Framework.SessionMemory.GetList``1(System.Func{``0,System.Boolean})">
            <summary>
            Gets a list of objects of the specified type, matching the specified criteria.
            </summary>
        </member>
        <member name="M:MSharp.Framework.SessionMemory.Find``1(System.Func{``0,System.Boolean})">
            <summary>
            Finds the first object matching the specified criteria.
            </summary>
        </member>
        <member name="M:MSharp.Framework.SessionMemory.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a specified records to the Session memory.
            </summary>
        </member>
        <member name="M:MSharp.Framework.SessionMemory.Add``1(``0)">
            <summary>
            Adds a specified record to the Session memory. If another object with the same ID already exists, the new object will replace it.
            </summary>
        </member>
        <member name="M:MSharp.Framework.SessionMemory.Remove(MSharp.Framework.IEntity)">
            <summary>
            Removes a specified record from the session memory.
            </summary>
        </member>
        <member name="T:MSharp.Framework.AutoNumberAttribute">
            <summary>
            When applied to a property, indicates that such property is AutoNumber (or Identity in SQL Server).
            </summary>
        </member>
        <member name="M:MSharp.Framework.AutoNumberAttribute.IsAutoNumber(System.Reflection.PropertyInfo)">
            <summary>
            Determines if a given property is auto number.
            </summary>
        </member>
        <member name="M:MSharp.Framework.CacheDependentAttribute.#ctor(System.Type)">
            <summary>
            Creates a new CacheDependantAttribute instance.
            </summary>
        </member>
        <member name="P:MSharp.Framework.CacheDependentAttribute.DependentType">
            <summary>
            Gets the dependent type.
            </summary>
        </member>
        <member name="M:MSharp.Framework.CacheDependentAttribute.GetDependentTypes(System.Type)">
            <summary>
            Gets a list of types that depend on a given entity.
            </summary>
        </member>
        <member name="M:MSharp.Framework.CacheDependentAttribute.FindDependentTypes(System.Type)">
            <summary>
            Finds a list of types that depend on a given entity.
            </summary>
        </member>
        <member name="T:MSharp.Framework.PrimaryKeyAttribute">
            <summary>
            When applied to a property, it marks it as the primary key of that class.
            This is intended to be used by object relational mapping (ORM) tools.
            </summary>
        </member>
        <member name="T:MSharp.Framework.CalculatedAttribute">
            <summary>
            When applied to a property, indicates that such property does not exist in the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.CalculatedAttribute.IsCalculated(System.Reflection.PropertyInfo)">
            <summary>
            Determines if a given property is calculated.
            </summary>
        </member>
        <member name="T:MSharp.Framework.DateOnlyAttribute">
            <summary>
            When applied to a property of type DateTime or Nullable[DateTime] it specifies that values are for Date only, 
            and the time part is meant to be disregarded.
            </summary>
        </member>
        <member name="T:MSharp.Framework.LogEventsAttribute">
            <summary>
            When applied to a class, indicates whether data access events should be logged for instances of that type.
            </summary>
        </member>
        <member name="M:MSharp.Framework.LogEventsAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new LogEventsAttribute instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.ManyToManyAttribute.GetManyToManyProperties(System.Type)">
            <summary>
            Gets a list of types that depend on a given entity.
            </summary>
        </member>
        <member name="M:MSharp.Framework.ManyToManyAttribute.GetManyToManyProperties(System.Type,System.Nullable{System.Boolean})">
            <summary>
            Gets a list of types that depend on a given entity.
            </summary>
        </member>
        <member name="M:MSharp.Framework.ManyToManyAttribute.FindManyToManyProperties(System.Type,System.Nullable{System.Boolean})">
            <summary>
            Returns a list of types that depend on a given entity.
            </summary>
        </member>
        <member name="P:MSharp.Framework.ManyToManyAttribute.Lazy">
            <summary>
            Gets or sets the Lazy of this ManyToManyAttribute.
            </summary>
        </member>
        <member name="T:MSharp.Framework.PersistentAttribute">
            <summary>
            When applied to a class, defines its Application data accessor type.
            </summary>
        </member>
        <member name="T:MSharp.Framework.CacheObjectsAttribute">
            <summary>
            Specifies if a type is cacheable.
            </summary>
        </member>
        <member name="M:MSharp.Framework.CacheObjectsAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new CacheObjectsAttribute instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.CacheObjectsAttribute.IsEnabled(System.Type)">
            <summary>
            Determines if caching is enabled for a given type.
            </summary>
        </member>
        <member name="M:MSharp.Framework.SmallTableAttribute.IsEnabled(System.Type)">
            <summary>
            Determines if small table is specified for a given type.
            </summary>
        </member>
        <member name="M:MSharp.Framework.SoftDeleteAttribute.IsEnabled(System.Type)">
            <summary>
            Determines if soft delete is enabled for a given type.
            </summary>
        </member>
        <member name="T:MSharp.Framework.SoftDeleteAttribute.Context">
            <summary>
            Provides support for bypassing softdelete rule.
            </summary>
        </member>
        <member name="M:MSharp.Framework.SoftDeleteAttribute.Context.#ctor(System.Boolean)">
            <summary>
            Creates a new Context instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.SoftDeleteAttribute.Context.ShouldByPassSoftDelete">
            <summary>
            Determines if SoftDelete check should the bypassed in the current context.
            </summary>
        </member>
        <member name="T:MSharp.Framework.ApplicationEventManager">
            <summary>
            Provides services for application events and general logging.
            </summary>
        </member>
        <member name="M:MSharp.Framework.ApplicationEventManager.GetChangesXml(MSharp.Framework.IEntity)">
            <summary>
            Gets the changes XML for a specified object. That object should be in its OnSaving event state.
            </summary>
        </member>
        <member name="M:MSharp.Framework.ApplicationEventManager.GetChanges(MSharp.Framework.IEntity,MSharp.Framework.IEntity)">
            <summary>
            Gets the changes applied to the specified object.
            Each item in the result will be {PropertyName, { OldValue, NewValue } }.
            </summary>
        </member>
        <member name="M:MSharp.Framework.ApplicationEventManager.RecordScheduledTask(System.String,System.DateTime)">
            <summary>
            Records the execution result of a scheduled task. 
            </summary>
            <param name="task">The name of the scheduled task.</param>
            <param name="startTime">The time when this task was started.</param>
        </member>
        <member name="M:MSharp.Framework.ApplicationEventManager.RecordScheduledTask(System.String,System.DateTime,System.Exception)">
            <summary>
            Records the execution result of a scheduled task. 
            </summary>
            <param name="task">The name of the scheduled task.</param>
            <param name="startTime">The time when this task was started.</param>
            <param name="error">The Exception that occurred during the task execution.</param>
        </member>
        <member name="M:MSharp.Framework.ApplicationEventManager.LoadItem(MSharp.Framework.IApplicationEvent)">
            <summary>
            Loads the item recorded in this event.
            </summary>
        </member>
        <member name="M:MSharp.Framework.ApplicationEventManager.GetCurrentUserId(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the current user id.
            </summary>
        </member>
        <member name="M:MSharp.Framework.ApplicationEventManager.GetCurrentUserIP">
            <summary>
            Gets the IP address of the current user.
            </summary>
        </member>
        <member name="M:MSharp.Framework.ApplicationEventManager.RecordException(System.Exception)">
            <summary>
            Records the provided exception in the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.ApplicationEventManager.RecordException(System.String,System.Exception)">
            <summary>
            Records the provided exception in the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.ApplicationEventManager.Log(System.String,System.String,MSharp.Framework.IEntity,System.String,System.String)">
            <summary>
            Logs the specified event as a record in the ApplicationEvents database table.
            </summary>
            <param name="eventTitle">The event title.</param>
            <param name="details">The details of the event.</param>
            <param name="owner">The record for which this event is being logged (optional).</param>
            <param name="userId">The ID of the user involved in this event (optional). If not specified, the current ASP.NET context user will be used.</param>
            <param name="userIp">The IP address of the user involved in this event (optional). If not specified, the IP address of the current Http context (if available) will be used.</param>
        </member>
        <member name="T:MSharp.Framework.DefaultApplicationEventManagerBase">
            <summary>
            This class provides default services for application events and general logging.
            </summary>
        </member>
        <member name="E:MSharp.Framework.DefaultApplicationEventManagerBase.OnRecordingSave">
            <summary>
            It's fired just before the event log instance for a SAVE operation is saved in the database.
            Handle it to modify the event log instance, add additional data, etc.
            </summary>
        </member>
        <member name="E:MSharp.Framework.DefaultApplicationEventManagerBase.OnRecordingDelete">
            <summary>
            It's fired just before the event log instance for a delete operation is saved in the database.
            Handle it to modify the event log instance, add additional data, etc.
            </summary>
        </member>
        <member name="M:MSharp.Framework.DefaultApplicationEventManagerBase.CreateApplicationEvent">
            <summary>
            Specifies a factory to instantiate EmailQueueItem objects.
            </summary>
        </member>
        <member name="M:MSharp.Framework.DefaultApplicationEventManagerBase.GetCurrentUserIP">
            <summary>
            Gets the IP address of the current user.
            </summary>
        </member>
        <member name="M:MSharp.Framework.DefaultApplicationEventManagerBase.GetCurrentUserId(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the current user id.
            </summary>
        </member>
        <member name="M:MSharp.Framework.DefaultApplicationEventManagerBase.GetChanges(MSharp.Framework.IEntity,MSharp.Framework.IEntity)">
            <summary>
            Gets the changes applied to the specified object.
            Each item in the result will be {PropertyName, { OldValue, NewValue } }.
            </summary>
        </member>
        <member name="M:MSharp.Framework.DefaultApplicationEventManagerBase.GetChangesXml(MSharp.Framework.IEntity)">
            <summary>
            Gets the changes XML for a specified object. That object should be in its OnSaving event state.
            </summary>
        </member>
        <member name="M:MSharp.Framework.DefaultApplicationEventManagerBase.GetDataToLog(MSharp.Framework.IEntity)">
            <summary>
            Gets the data of a specified object's properties in a dictionary.
            </summary>
        </member>
        <member name="M:MSharp.Framework.DefaultApplicationEventManagerBase.RecordScheduledTask(System.String,System.DateTime)">
            <summary>
            Records the execution result of a scheduled task. 
            </summary>
            <param name="task">The name of the scheduled task.</param>
            <param name="startTime">The time when this task was started.</param>
        </member>
        <member name="M:MSharp.Framework.DefaultApplicationEventManagerBase.RecordScheduledTask(System.String,System.DateTime,System.Exception)">
            <summary>
            Records the execution result of a scheduled task. 
            </summary>
            <param name="task">The name of the scheduled task.</param>
            <param name="startTime">The time when this task was started.</param>
            <param name="error">The Exception that occurred during the task execution.</param>
        </member>
        <member name="M:MSharp.Framework.DefaultApplicationEventManagerBase.RecordException(System.Exception)">
            <summary>
            Records the provided exception in the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.DefaultApplicationEventManagerBase.RecordException(System.String,System.Exception)">
            <summary>
            Records the provided exception in the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.DefaultApplicationEventManagerBase.Log(System.String,System.String,MSharp.Framework.IEntity,System.String,System.String)">
            <summary>
            Logs the specified event as a record in the ApplicationEvents database table.
            </summary>
            <param name="eventTitle">The event title.</param>
            <param name="details">The details of the event.</param>
            <param name="owner">The record for which this event is being logged (optional).</param>
            <param name="userId">The ID of the user involved in this event (optional). If not specified, the current ASP.NET context user will be used.</param>
            <param name="userIp">The IP address of the user involved in this event (optional). If not specified, the IP address of the current Http context (if available) will be used.</param>
        </member>
        <member name="M:MSharp.Framework.DefaultApplicationEventManagerBase.LoadItem(MSharp.Framework.IApplicationEvent)">
            <summary>
            Loads the item recorded in this event.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Log">
            <summary>
            Records information in the ApplicationEvents table.
            </summary>
        </member>
        <member name="M:MSharp.Framework.UndoContext.#ctor">
            <summary>
            Creates a new UndoContext instance.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Entity">
            <summary>
            Entity, a persistent object in the application.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.#ctor">
            <summary>
            Base constructor (called implicitly in all typed entity classes) to initialize an object.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.GetId">
            <summary>
            Gets the id of this entity.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.InvalidateCachedReferences">
            <summary>
            Invalidates its cached references.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Entity.IsNew">
            <summary>
            Determines whether this is a newly created instace. This value will be True for new objects, and False for anything loaded from the database.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Entity.IsMarkedSoftDeleted">
            <summary>
            Determines whether this instance is "soft-deleted".
            </summary>
        </member>
        <member name="F:MSharp.Framework.Entity.IsStale">
            <summary>
            Determines whether this object is already cloned and updated in the database without this instance being updated.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.Initialize">
            <summary>
            Initializes this instance.
            This can be overridden in the business entity types to provide "construction" logic.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.GetPrimitiveProperties">
            <summary>
            Gets the primitive properties of this tye.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.ExtractPrimitiveProperties(System.Type)">
            <summary>
            Extracts the primitive properties of a specified type.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.ToString(System.String)">
            <summary>
            Returns a string that contains all primitive properties of this instance.
            This should be used normally in "full text search".
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.ValidateProperties">
            <summary>
            Validates the data for the properties of the current instance.
            It throws a ValidationException if an error is detected
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.Validate">
            <summary>
            Validates this instance to ensure it can be saved in a data repository.
            If this finds an issue, it throws a ValidationException for that.        
            This calls ValidateProperties(). Override this method to provide custom validation logic in a type.
            </summary>
        </member>
        <member name="E:MSharp.Framework.Entity.Loaded">
            <summary>
            This even is raised just after this instance is loaded from the database.
            </summary>
        </member>
        <member name="E:MSharp.Framework.Entity.Saving">
            <summary>
            This event is raised just before this instance is saved in the data repository.
            </summary>
        </member>
        <member name="E:MSharp.Framework.Entity.Validating">
            <summary>
            This is raised just before the object is being Validated.
            It will automatically be called in Database.Save() method before calling the Validate() method.
            Use this to do any last-minute object modifications, such as initializing complex values.
            </summary>
        </member>
        <member name="E:MSharp.Framework.Entity.Saved">
            <summary>
            This event is raised after this instance is saved in the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.OnSaved(MSharp.Framework.SaveEventArgs)">
            <summary>
            Raises the <see cref = "E:Saved"/> event.
            </summary>
            <param name = "e">The <see cref = "T:MSharp.Framework.SaveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:MSharp.Framework.Entity.Deleting">
            <summary>
            This event is raised just before this instance is deleted from the database.
            </summary>
        </member>
        <member name="E:MSharp.Framework.Entity.Deleted">
            <summary>
            This event is raised just after this instance is deleted from the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.Clone">
            <summary>
            Creates a shallow copy of this object.
            If you need to update an instance loaded from the database, you must create a Clone of it before applying any changes.
            Otherwise you will be editing the "live" instance from the cache, that is used by all other threads!
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.        
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.Equals(MSharp.Framework.Entity)">
            <summary>Determines whether the specified object is equal to this instance. </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.op_Equality(MSharp.Framework.Entity,System.Object)">
            <summary>
            Implements the operator ==.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name = "other">An object to compare with this instance.</param>
        </member>
        <member name="P:MSharp.Framework.Entity`1.ID">
            <summary>
            Gets or sets the ID of this object.
            </summary>
        </member>
        <member name="P:MSharp.Framework.Entity`1.OriginalId">
            <summary>
            Gets the original id of this type as it was in the database.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MSharp.Framework.Entity`1.Equals(MSharp.Framework.Entity)">
            <summary>
            Determines whether this instance is equal to another specified instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Entity`1.GetId">
            <summary>
            Gets the ID of this object.
            </summary>
        </member>
        <member name="T:MSharp.Framework.EntityManager">
            <summary>
            Provides services for Entity objects.
            </summary>
        </member>
        <member name="M:MSharp.Framework.EntityManager.IsImmutable(MSharp.Framework.IEntity)">
            <summary>
            Determines whether the specified record is immutable, or closed for changes.        
            An object marked as immutable is shared in the application cache. Therefore it must not be changed.        
            </summary>
        </member>
        <member name="M:MSharp.Framework.EntityManager.MarkImmutable(MSharp.Framework.IEntity)">
            <summary>
            Marks the specified object as immutable.
            </summary>
        </member>
        <member name="E:MSharp.Framework.EntityManager.InstanceSaving">
            <summary>
            This event is raised for the whole Entity type before "any" object is saved in the database.
            You can handle this to provide global functionality/event handling scenarios.
            </summary>
        </member>
        <member name="E:MSharp.Framework.EntityManager.InstanceSaved">
            <summary>
            This event is raised for the whole Entity type after "any" object is saved in the database.
            You can handle this to provide global functionality/event handling scenarios.
            </summary>
        </member>
        <member name="E:MSharp.Framework.EntityManager.InstanceDeleting">
            <summary>
            This event is raised for the whole Entity type before "any" object is deleted from the database.
            You can handle this to provide global functionality/event handling scenarios.
            </summary>
        </member>
        <member name="E:MSharp.Framework.EntityManager.InstanceValidating">
            <summary>
            This event is raised for the whole Entity type before "any" object is validated.
            You can handle this to provide global functionality/event handling scenarios.
            This will be called as the first line of the base Entity's OnValidating method.
            </summary>
        </member>
        <member name="E:MSharp.Framework.EntityManager.InstanceDeleted">
            <summary>
            This event is raised for the whole Entity type after "any" object is deleted from the database.
            You can handle this to provide global functionality/event handling scenarios.
            </summary>
        </member>
        <member name="M:MSharp.Framework.EntityManager.SetSaved(MSharp.Framework.IEntity,System.Boolean)">
            <summary>
            Sets the state of an entity instance to saved.
            </summary>
        </member>
        <member name="M:MSharp.Framework.EntityManager.CloneAsNew``1(``0)">
            <summary>
            Creates a new clone of an entity. This will work in a polymorphic way.
            </summary>        
        </member>
        <member name="M:MSharp.Framework.EntityManager.CloneAsNew``1(``0,System.Action{``0})">
            <summary>
            Creates a new clone of an entity. This will work in a polymorphic way.
            </summary>        
        </member>
        <member name="M:MSharp.Framework.EntityManager.RestsetOriginalId``1(MSharp.Framework.IEntity{``0})">
            <summary>
            Sets the ID of an object explicitly.
            </summary>
        </member>
        <member name="M:MSharp.Framework.EntityManager.ReadProperty(System.Object,System.String)">
            <summary>
            Read the value of a specified property from a specified object.
            </summary>
        </member>
        <member name="T:MSharp.Framework.GuidEntity">
            <summary>Represents a base Entity with ID of type Guid.</summary>
        </member>
        <member name="P:MSharp.Framework.GuidEntity.ID">
            <summary>
            Gets a unique Identifier for this instance. In the database, this will be the primary key of this object.
            </summary>
        </member>
        <member name="M:MSharp.Framework.GuidEntity.Clone">
            <summary>
            Creates a shallow copy of this object.
            If you need to update an instance loaded from the database, you must create a Clone of it before applying any changes.
            Otherwise you will be editing the "live" instance from the cache, that is used by all other threads!
            </summary>
        </member>
        <member name="T:MSharp.Framework.IEntity">
            <summary>
            Represents an M# Entity.
            </summary>
        </member>
        <member name="P:MSharp.Framework.IEntity.IsNew">
            <summary>
            Determines whether this object has just been instantiated as a new object, or represent an already persisted instance.
            </summary>
        </member>
        <member name="M:MSharp.Framework.IEntity.Validate">
            <summary>
            Validates this instance and throws ValidationException if necessary.
            </summary>
        </member>
        <member name="M:MSharp.Framework.IEntity.GetId">
            <summary>
            Gets the id of this entity.
            </summary>        
        </member>
        <member name="M:MSharp.Framework.IEntity.InvalidateCachedReferences">
            <summary>
            Invalidates all its cached referencers.
            </summary>
        </member>
        <member name="T:MSharp.Framework.IEntity`1">
            <summary>
            A persistent object in the application.
            </summary>
        </member>
        <member name="P:MSharp.Framework.IEntity`1.ID">
            <summary>
            Gets the ID.
            </summary>
        </member>
        <member name="P:MSharp.Framework.IntEntity.ID">
            <summary>
            Gets a unique Identifier for this instance. In the database, this will be the primary key of this object.
            </summary>
        </member>
        <member name="M:MSharp.Framework.GeoLocationExtensions.GetDistance(MSharp.Framework.Services.IGeoLocation,MSharp.Framework.Services.IGeoLocation)">
            <summary>
            Gets the geo distance in miles between this and another specified location.
            </summary>
        </member>
        <member name="M:MSharp.Framework.GeoLocationExtensions.GetDistance(MSharp.Framework.Services.IGeoLocated,MSharp.Framework.Services.IGeoLocation)">
            <summary>
            Gets the geo distance in miles between this located object and a specified location.
            </summary>
        </member>
        <member name="M:MSharp.Framework.GeoLocationExtensions.GetDistance(MSharp.Framework.Services.IGeoLocation,MSharp.Framework.Services.IGeoLocated)">
            <summary>
            Gets the geo distance in miles between this location and a specified located object.
            </summary>
        </member>
        <member name="M:MSharp.Framework.GeoLocationExtensions.GetDistance(MSharp.Framework.Services.IGeoLocated,MSharp.Framework.Services.IGeoLocated)">
            <summary>
            Gets the geo distance in miles between this and another specified located object.
            </summary>
        </member>
        <member name="T:MSharp.Framework.Config">
            <summary>
            Provides shortcut access to the value specified in web.config (or App.config) under AppSettings or ConnectionStrings.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Config.GetConnectionString(System.String)">
            <summary>
            Gets the connection string with the specified key.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Config.Get(System.String)">
            <summary>
            Gets the value configured in Web.Config (or App.config) under AppSettings.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Config.Get(System.String,System.String)">
            <summary>
            Gets the value configured in Web.Config (or App.config) under AppSettings.
            If no value is found there, it will return the specified default value.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Config.Get``1(System.String)">
            <summary>
            Reads the value configured in Web.Config (or App.config) under AppSettings.
            It will then convert it into the specified type.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Config.Get``1(System.String,``0)">
            <summary>
            Reads the value configured in Web.Config (or App.config) under AppSettings.
            It will then convert it into the specified type.
            If no value is found there, it will return the specified default value.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Config.TryGet``1(System.String)">
            <summary>
            Reads the value configured in Web.Config (or App.config) under AppSettings.
            It will then try to convert it into the specified type.
            If no vale is found in AppSettings or the conversion fails, then it will return null, or the default value of the specified type T.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Config.IsDefined(System.String)">
            <summary>
            Determines whether the specified key is defined in configuration file.
            </summary>
        </member>
        <member name="M:MSharp.Framework.Config.ReadAppSettings(System.IO.FileInfo)">
            <summary>
            Reads the app settings from a specified configuration file.
            </summary>
        </member>
        <member name="T:MSharp.Framework.JsonExposedAttribute">
            <summary>
            Marks a property as Serializable (mainly for Json).
            </summary>
        </member>
        <member name="T:MSharp.Framework.CachedReference`1">
            <summary>
            Provides immediate access to retrieved entities. It is aware of deletes and updates.
            </summary>
        </member>
        <member name="T:MSharp.Framework.CachedReference`2">
            <summary>
            Provides immediate access to retrieved entities. It is aware of deletes and updates.
            </summary>
        </member>
        <member name="M:MSharp.Framework.CachedReference`2.Get(System.Nullable{`0})">
            <summary>
            Gets the entity record from a specified database call expression.
            The first time it is loaded, all future calls will be immediately served.
            </summary>
        </member>
        <member name="T:System.EscapeGCopAttribute">
            <summary>
            When applied to a method it will skip all GCop warnings for that method (not to be abused).
            It is bad to escape any cop. Always try to avoid using this attribute by fixing your code.
            </summary>
        </member>
        <member name="M:System.IUserExtensions.IsInRole(MSharp.Framework.Services.IUser,System.String)">
            <summary>
            Determines whether this user has a specified role.
            </summary>
        </member>
        <member name="M:System.IUserExtensions.IsAuthenticated(MSharp.Framework.Services.IUser)">
            <summary>
            Determines if this user Is Authenticated.
            </summary>
        </member>
        <member name="M:System.IO.Compression.SevenZip.Compress(System.String,System.String[])">
            <summary>
            Compresses the specified folders into a 7 Zip archive folder.
            </summary>
        </member>
        <member name="M:System.IO.Compression.SevenZip.Compress(System.String,System.Nullable{System.Int32},System.String[])">
            <summary>
            Compresses the specified folders into a 7 Zip archive folder.
            </summary>
            <param name="splitSize">The maximum size of each splitted size in Kilo Bytes</param>        
        </member>
        <member name="M:System.IO.Compression.SevenZip.Compress(System.String,System.Nullable{System.Int32},System.IO.Compression.SevenZip.CompressionMode,System.String[])">
            <summary>
            Compresses the specified folders into a 7 Zip archive folder.
            </summary>
            <param name="splitSize">The maximum size of each splitted size in Kilo Bytes</param>        
        </member>
        <member name="M:System.IO.Compression.SevenZip.Compress(System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.IO.Compression.SevenZip.CompressionMode,System.String)">
            <summary>
            Compresses the specified source files into a temp 7Zip file and returns the temp 7Zip file.
            </summary>
        </member>
        <member name="M:System.IO.Compression.SevenZip.CompressToBytes(System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.IO.Compression.SevenZip.CompressionMode,System.String)">
            <summary>
            Compresses the specified source files into a 7Zip file and returns the data of the 7Zip file. The temp file is deleted.
            </summary>
        </member>
        <member name="M:System.IO.Compression.SevenZip.Compress(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.IO.Compression.SevenZip.CompressionMode,System.String)">
            <summary>
            Creates a 7Zip file from the specified files.
            </summary>
        </member>
        <member name="M:System.IO.Compression.SevenZip.Compress(System.String,System.Nullable{System.Int32},System.IO.Compression.SevenZip.CompressionMode,System.String,System.String[],System.String[])">
            <summary>
            Compresses the specified folders into a 7 Zip archive folder.
            </summary>
            <param name="excludedFilePatterns">Use wildcards. Example: *\Folder\Sub-folder\*</param>
        </member>
        <member name="M:System.Drawing.Imaging.BitmapHelper.ToBuffer(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.Int32)">
            <summary>
            Gets the binary data of this image.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.BitmapHelper.FromBuffer(System.Byte[])">
            <summary>
            Converts the specified binary data to a bitmap.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.BitmapHelper.IsValidImage(System.Byte[])">
            <summary>
            Determines whether the specified binary data is for a valid image.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.BitmapHelper.Resize(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Returns a resized version of this image.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.BitmapHelper.Brighten(System.Drawing.Image,System.Int32)">
            <summary>
            Brightens or darkens this image to the specified level. Level should be between 0 and 255.
            0 Means totally dark and 255 means totally bright.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.BitmapHelper.CreateGraphics(System.Drawing.Image)">
            <summary>
            Creates a graphics object for this image.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.BitmapHelper.Crop(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            Crops this image with the specified rectangle.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.GifPalleteGenerator">
            <summary>
            Generates a color pallete for a GIF image.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.GifPalleteGenerator.GeneratePallete(System.Drawing.Bitmap)">
            <summary>
            Generates a color pallete based on the colors used in a specified image.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.GifPalleteGenerator.FindAllColours(System.Drawing.Bitmap)">
            <summary>
            Finds all colours used in the specified image.        
            The result will be the list of colours sorted by then umber of times that is used.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.GifProcessor.FindPalleteEntryIndex(System.Drawing.Color)">
            <summary>
            Finds the index of the relevant entry in the new pallete to the specified color.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.GifProcessor.GetDifference(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Gets the difference between the 2 specified colors.
            </summary>
        </member>
        <member name="T:System.Drawing.Imaging.ImageOptimizer">
            <summary>
            A utility to resize and optimise image files.
            </summary>    
        </member>
        <member name="M:System.Drawing.Imaging.ImageOptimizer.#ctor">
            <summary>
            Creates a new instance of ImageOptimizer class with default settings.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.ImageOptimizer.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of ImageOptimizer class.
            </summary>		
        </member>
        <member name="T:System.Drawing.Imaging.ImageOptimizer.ImageFormat">
            <summary>
            Gets the available output image formats.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.ImageOptimizer.Optimize(System.Drawing.Image)">
            <summary>
            Applies the settings of this instance on a specified source image, and provides an output optimized/resized image.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.ImageOptimizer.Optimize(System.Byte[],System.Boolean)">
            <summary>
            Optimizes the specified source image and returns the binary data of the output image.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.ImageOptimizer.Optimize(System.String,System.String)">
            <summary>
            Applies optimization settings on a a source image file on the disk and saves the output to another file with the specified path.
            </summary>
        </member>
        <member name="M:System.Drawing.Imaging.ImageOptimizer.Optimize(System.String)">
            <summary>
            Applies optimization settings on a source image file.
            Please note that the original file data is lost (overwritten) in this overload.
            </summary>
        </member>
        <member name="M:System.GraphicExtensions.GetColumn(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Gets an image which is a column of this image at the specified index.
            </summary>
        </member>
        <member name="M:System.GraphicExtensions.GetWidth(System.Drawing.Font,System.String,System.Boolean)">
            <summary>
            Gets the width of a specified text in this font.
            </summary>
        </member>
        <member name="M:System.GraphicExtensions.Insert(System.Drawing.Bitmap,System.Int32,System.Drawing.Bitmap)">
            <summary>
            Inserts the specified image at the specified column inside this host image.
            </summary>
        </member>
        <member name="M:System.GraphicExtensions.Rotate(System.Drawing.Image,System.Double)">
            <summary>
            Creates a rotated version from this image.
            </summary>
            <param name="degrees">The number of degrees to rotate this image. Direction of rotation will be clock-wise.</param>       
        </member>
        <member name="M:System.GraphicExtensions.Stretch(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Stretches the specified image.
            </summary>
        </member>
        <member name="M:System.Security.Encryption.GenerateAsymmetricKeys">
            <summary>
            Generates a public/private key for asymmetric encryption.
            </summary>
        </member>
        <member name="M:System.Security.Encryption.EncryptAsymmetric(System.String,System.String)">
            <summary>
            Encrypts the specified text with the specified public key.
            </summary>
        </member>
        <member name="M:System.Security.Encryption.DecryptAsymmetric(System.String,System.String)">
            <summary>
            Decrypts the specified text with the specified public/private key pair.
            </summary>
        </member>
        <member name="M:System.Security.Encryption.Encrypt(System.String,System.String)">
            <summary>
            Encrypts the specified text with the specified password.
            </summary>
        </member>
        <member name="M:System.Security.Encryption.Decrypt(System.String,System.String)">
            <summary>
            Decrypts the specified encrypted text with the specified password.
            </summary>
        </member>
        <member name="P:System.MethodPointer.Method">
            <summary>
            Gets or sets the Method of this MethodPointer.
            </summary>
        </member>
        <member name="P:System.MethodPointer.Name">
            <summary>
            Gets the name of this method.
            </summary>
        </member>
        <member name="M:System.MethodPointer.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="M:System.MethodPointer.op_Implicit(System.Linq.Expressions.Expression{System.Func{System.Object}})~System.MethodPointer">
            <summary>
            Performs an implicit conversion from a specified lambda expression to <see cref="T:System.MethodPointer"/>.
            </summary>
        </member>
        <member name="M:System.MethodPointer.op_Implicit(System.Linq.Expressions.Expression{System.Action})~System.MethodPointer">
            <summary>
            Performs an implicit conversion from a specified lambda expression to <see cref="T:System.MethodPointer"/>.
            </summary>
        </member>
        <member name="M:System.MethodPointer.op_Implicit(System.Action)~System.MethodPointer">
            <summary>
            Performs an implicit conversion from a specified lambda expression to <see cref="T:System.MethodPointer"/>.
            </summary>
        </member>
        <member name="M:System.Base32Integer.#ctor(System.Int32)">
            <summary>
            Creates a new Base32Integer instance.
            </summary>
        </member>
        <member name="M:System.Base32Integer.#ctor(System.String)">
            <summary>
            Creates a new Base32Integer instance.
            </summary>
        </member>
        <member name="M:System.Base32Integer.ToBase32String(System.Int32)">
            <summary>
            Converts an array of bytes to a Base32-k string.
            </summary>
        </member>
        <member name="M:System.Base32Integer.FromBase32String(System.String)">
            <summary>
            Converts a Base32-k string into an array of bytes.
            </summary>        
        </member>
        <member name="M:System.CachedValue.Create``1(System.Func{``0})">
            <summary>
            Creates a CachedValue the specified value builder.
            </summary>
        </member>
        <member name="M:System.CachedValue`1.#ctor(`0)">
            <summary>
            Creates a new CachedValue instance.
            </summary>
        </member>
        <member name="M:System.CachedValue`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new CachedValue instance with lazy loading support.
            </summary>
            <param name="valueBuilder">The value builder.</param>
        </member>
        <member name="F:System.CachedValue`1._Value">
            <summary>
            Stores the underlying value.
            </summary>
        </member>
        <member name="P:System.CachedValue`1.Value">
            <summary>
            Gets the underlying value.
            </summary>
        </member>
        <member name="P:System.EventArgs`1.Data">
            <summary>
            Gets or sets the Data property of this EventArgs.
            </summary>
        </member>
        <member name="M:System.EventArgs`1.#ctor(`0)">
            <summary>
            Creates a new EventArgs instance.
            </summary>
        </member>
        <member name="M:System.EventArgs`1.#ctor">
            <summary>
            Creates a new EventArgs instance.
            </summary>
        </member>
        <member name="P:System.EventArgs`2.Data1">
            <summary>
            Gets or sets the Data property of this EventArgs.
            </summary>
        </member>
        <member name="P:System.EventArgs`2.Data2">
            <summary>
            Gets or sets the Data property of this EventArgs.
            </summary>
        </member>
        <member name="M:System.EventArgs`2.#ctor(`0,`1)">
            <summary>
            Creates a new EventArgs instance.
            </summary>
        </member>
        <member name="M:System.EventArgs`2.#ctor(`0)">
            <summary>
            Creates a new EventArgs instance.
            </summary>
        </member>
        <member name="M:System.EventArgs`2.#ctor">
            <summary>
            Creates a new EventArgs instance.
            </summary>
        </member>
        <member name="F:System.LocalTime.CurrentTimeZone">
            <summary>
            By default provides the current server's timezone.
            You can override this to provide user-specific time-zones or based on any other system setting.
            </summary>
        </member>
        <member name="F:System.LocalTime.GlobalNowGetter">
            <summary>
            If set, it will provide the "Now" value.
            Note: This has lower priority than thread-level overrides.
            </summary>
        </member>
        <member name="P:System.LocalTime.Now">
            <summary>        
            <para>Gets the local current date/time of the application.</para>
            <para>By default it equals to System.DateTime.Now.</para>
            <para>To override its value, you should wrap the calling code inside "using (LocalTime.SetNow(some date)) { ... }"</para>
            <para>&#160;</para>
            <para> Examples:</para>
            <para>—————————————————————————————————</para>
            <para>var now = LocalTime.Now // which is identical to DateTime.Now</para>
            <para>—————————————————————————————————</para>
            <para>using (LocalTime.Set(DateTime.Parse("15/01/2000 06:13")))</para>
            <para>{</para>
            <para> var date = LocalTime.Now; // that sets date to 15th Jan 200 at 6:13.</para>
            <para>}</para>
            </summary>
        </member>
        <member name="P:System.LocalTime.UtcNow">
            <summary>
            Gets the current Universal Time.
            </summary>
        </member>
        <member name="P:System.LocalTime.Today">
            <summary>
            <para>Gets the local current date of the application (no time).</para>
            <para>By default it equals to System.DateTime.Today.</para>
            <para>To override its value, you should wrap the calling code inside "using (LocalTime.SetNow(some date)) { ... }"</para>
            <para>&#160;</para>
            <para> Examples:</para>
            <para>—————————————————————————————————</para>
            <para>var now = LocalTime.Today // which is identical to DateTime.Today</para>
            <para>—————————————————————————————————</para>
            <para>using (LocalTime.Set(DateTime.Parse("15/01/2000 06:13")))</para>
            <para>{</para>
            <para> var date = LocalTime.Today; // that sets date to 15th Jan 200.</para>
            <para>}</para>
            </summary>
        </member>
        <member name="P:System.LocalTime.UtcToday">
            <summary>
            Gets the current Universal Time's date part (without time).
            </summary>
        </member>
        <member name="M:System.LocalTime.Set(System.DateTime)">
            <summary>
            <para>Sets the current time of the application.</para>
            <para>&#160;</para>
            <para> Examples:</para>
            <para>—————————————————————————————————</para>
            <para>using (LocalTime.Set(DateTime.Parse("15/01/2000 06:13")))</para>
            <para>{</para>
            <para><tab> </tab>//Here any call for LocalTime.Now/Today will return 15th of Jan 2000 (at 6:30).</para>
            <para>}</para>
            </summary>
        </member>
        <member name="M:System.LocalTime.Set(System.Func{System.DateTime})">
            <summary>
            <para>Sets the current time function of the application.</para>
            </summary>
        </member>
        <member name="M:System.LocalTime.RedefineNow(System.Func{System.DateTime})">
            <summary>
            Sets the current time function of the application.
            Note: This has lower priority than thread-level time setting.
            </summary>
        </member>
        <member name="M:System.LocalTime.Stop">
            <summary>
            <para>Freezes the time to the current system time.</para>
            <para>&#160;</para>
            <para> Examples:</para>
            <para>—————————————————————————————————</para>
            <para>using (LocalTime.Stop())</para>
            <para>{</para>
            <para> // Freezes the time to Datetime.Now.</para>
            <para>}</para>
            </summary>
        </member>
        <member name="M:System.LocalTime.Add(System.TimeSpan)">
            <summary>
            Adds the specified time to the current LocalTime.
            </summary>
        </member>
        <member name="M:System.OverriddenApplicationDate.#ctor(System.Func{System.DateTime})">
            <summary>
            Creates a new OverriddenApplicationDate instance.
            </summary>
        </member>
        <member name="T:System.ProcessContext`1">
            <summary>
            Provides process context data sharing mechanism to pass arguments and data around execution in a shared pipeline.
            It supports context nesting.
            </summary>
        </member>
        <member name="M:System.ProcessContext`1.#ctor(`0)">
            <summary>
            Creates a new Process Context.
            </summary>
        </member>
        <member name="M:System.ProcessContext`1.#ctor(System.String,`0)">
            <summary>
            Creates a new Process Context with the specified key and data.
            </summary>
        </member>
        <member name="M:System.ProcessContext`1.SetDefaultDataExpression(System.Func{`0})">
            <summary>
            Sets the default data expression, when no context data is available.
            </summary>
        </member>
        <member name="P:System.ProcessContext`1.Data">
            <summary>
            Gets or sets the Data of this ProcessContext.
            </summary>
        </member>
        <member name="P:System.ProcessContext`1.Key">
            <summary>
            Gets or sets the key of this ProcessContext.
            </summary>
        </member>
        <member name="M:System.ProcessContext`1.GetContexts(System.String)">
            <summary>
            A number of nested process context objects in the currenly executing thread.
            </summary>
        </member>
        <member name="P:System.ProcessContext`1.Current">
            <summary>
            Gets the data of the current context with default key (null).
            </summary>
        </member>
        <member name="M:System.ProcessContext`1.GetCurrent(System.String)">
            <summary>
            Gets the data of the current context with the specified key.
            </summary>
        </member>
        <member name="M:System.ProcessContext`1.Dispose">
            <summary>
            Disposes the current process context and switches the actual context to the containing process context.
            </summary>
        </member>
        <member name="T:System.ProcessContext">
            <summary>
            Provides a facade for easiper creation of a Process Context.
            </summary>
        </member>
        <member name="M:System.ProcessContext.Create``1(``0)">
            <summary>
            Create a process context for the specified object.
            To access the context object, you can use ProcessContext&lt;Your Type&gt;.Current.
            </summary>
        </member>
        <member name="M:System.ProcessContext.Create``1(System.String,``0)">
            <summary>
            Create a process context for the specified object with the specified key.
            To access the context object, you can use ProcessContext&lt;Your Type&gt;.GetCurrent(key).
            </summary>
        </member>
        <member name="T:System.Range`1">
            <summary>
            Provides a range of values.
            </summary>
        </member>
        <member name="M:System.Range`1.#ctor">
            <summary>
            Creates a new Range instance.
            </summary>
        </member>
        <member name="M:System.Range`1.#ctor(`0,`0)">
            <summary>
            Creates a new Range instance with the specified boundaries.
            </summary>
        </member>
        <member name="P:System.Range`1.From">
            <summary>
            Gets or sets the From of this Range.
            </summary>
        </member>
        <member name="P:System.Range`1.To">
            <summary>
            Gets or sets the To of this Range.
            </summary>
        </member>
        <member name="M:System.Range`1.GetLength">
            <summary>
            Gets the length of this range. For a date range, use the TimeOfDay property of the returned date time.
            </summary>
        </member>
        <member name="M:System.Range`1.Lacks(`0,System.Boolean)">
            <summary>
            Determines whether or not this range lacks the given value.
            </summary>
        </member>
        <member name="M:System.Range`1.Contains(`0,System.Boolean)">
            <summary>
            Determines whether or not this range cotnains the given value
            </summary>
        </member>
        <member name="M:System.Range`1.Contains(System.Range{`0})">
            <summary>
            Determines whether or not this range contains with the given range
            </summary>
        </member>
        <member name="M:System.Range`1.Intersects(System.Range{`0},System.Boolean)">
            <summary>
            Determines whether or not this range intersects with the given range
            </summary>
        </member>
        <member name="M:System.Range`1.ToString">
            <summary>
            Returns: {From} - {To}.
            </summary>
        </member>
        <member name="M:System.Range`1.ToString(System.String)">
            <summary>
            Returns {From}{rangeSeparator}{To}.
            </summary>
        </member>
        <member name="M:System.Range`1.ToString(System.String,System.String)">
            <summary>
            Returns the From and To values formatted by the specified format and then joined together with the specified rangeSeparator.
            </summary>
            <param name="perItemFormat">E.g. {0:dd MM yy}</param>
        </member>
        <member name="T:System.RangeCollection`1">
            <summary>
            Provides a collection of ranges to simplify the manipulation of them.
            This class is not thread-safe.
            </summary>
        </member>
        <member name="T:System.ShortGuid">
            <summary>
            Represents a globally unique identifier (GUID) with a  shorter string value.
            </summary>
        </member>
        <member name="F:System.ShortGuid.Empty">
            <summary>
            Equivalent to Guid.Empty.
            </summary>
        </member>
        <member name="M:System.ShortGuid.Parse(System.String)">
            <summary>
            Parses a specified text (that is either a normal Guid or a short guid).
            </summary>
        </member>
        <member name="M:System.ShortGuid.#ctor(System.String)">
            <summary>
            Creates a ShortGuid from a base64 encoded string
            </summary>
            <param name="value">The encoded guid as a 
            base64 string</param>
        </member>
        <member name="M:System.ShortGuid.#ctor(System.Guid)">
            <summary>
            Creates a ShortGuid from a Guid
            </summary>
            <param name="guid">The Guid to encode</param>
        </member>
        <member name="P:System.ShortGuid.Guid">
            <summary>
            Gets/sets the underlying Guid
            </summary>
        </member>
        <member name="P:System.ShortGuid.Value">
            <summary>
            Gets/sets the underlying base64 encoded string
            </summary>
        </member>
        <member name="M:System.ShortGuid.ToString">
            <summary>
            Returns the base64 encoded guid as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ShortGuid.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a 
            specified Object represent the same type and value.
            </summary>
            <param name="obj">The object to compare</param>
            <returns></returns>
        </member>
        <member name="M:System.ShortGuid.GetHashCode">
            <summary>
            Returns the HashCode for underlying Guid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ShortGuid.NewGuid">
            <summary>
            Initialises a new instance of the ShortGuid class
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ShortGuid.Encode(System.String)">
            <summary>
            Creates a new instance of a Guid using the string value, 
            then returns the base64 encoded version of the Guid.
            </summary>
            <param name="value">An actual Guid string (i.e. not a ShortGuid)</param>
            <returns></returns>
        </member>
        <member name="M:System.ShortGuid.Encode(System.Guid)">
            <summary>
            Encodes the given Guid as a base64 string that is 22 
            characters long.
            </summary>
            <param name="guid">The Guid to encode</param>
            <returns></returns>
        </member>
        <member name="M:System.ShortGuid.Decode(System.String)">
            <summary>
            Decodes the given base64 string
            </summary>
            <param name="value">The base64 encoded string of a Guid</param>
            <returns>A new Guid</returns>
        </member>
        <member name="M:System.ShortGuid.op_Equality(System.ShortGuid,System.ShortGuid)">
            <summary>
            Determines if both ShortGuids have the same underlying Guid value.
            </summary>
        </member>
        <member name="M:System.ShortGuid.op_Inequality(System.ShortGuid,System.ShortGuid)">
            <summary>
            Determines if both ShortGuids do not have the 
            same underlying Guid value.
            </summary>
        </member>
        <member name="M:System.ShortGuid.op_Implicit(System.ShortGuid)~System.String">
            <summary>
            Implicitly converts the ShortGuid to it's string equivilent
            </summary>
        </member>
        <member name="M:System.ShortGuid.op_Implicit(System.ShortGuid)~System.Guid">
            <summary>
            Implicitly converts the ShortGuid to it's Guid equivilent
            </summary>
            <param name="shortGuid"></param>
            <returns></returns>
        </member>
        <member name="M:System.ShortGuid.op_Implicit(System.String)~System.ShortGuid">
            <summary>
            Implicitly converts the string to a ShortGuid
            </summary>
            <param name="shortGuid"></param>
            <returns></returns>
        </member>
        <member name="M:System.ShortGuid.op_Implicit(System.Guid)~System.ShortGuid">
            <summary>
            Implicitly converts the Guid to a ShortGuid 
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="T:System.MSharpExtensions">
            <summary>
            Provides extensions methods to Standard .NET types.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetPath(System.AppDomain,System.String[])">
            <summary>
            Gets the full path of a file or directory from a specified relative path.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            Will set the Position to zero, and then copy all bytes to a memory stream's buffer.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Post(System.Net.WebClient,System.String,System.Object)">
            <summary>
            Posts the specified data to a url and returns the response as string.
            All properties of the postData object will be sent as individual FORM parameters to the destination.
            </summary>
            <param name="postData">An anonymous object containing post data.</param>
        </member>
        <member name="M:System.MSharpExtensions.GetString(System.Net.WebResponse)">
            <summary>
            Gets the response data as string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetResponseString(System.Net.HttpWebRequest)">
            <summary>
            Gets the response data as string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.PostJson(System.Uri,System.Object)">
            <summary>
            Posts the specified object as JSON data to this URL.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Post(System.Uri,System.Object,System.Action{System.Net.WebClient})">
            <summary>
            Posts the specified data to this url and returns the response as string.
            All items in the postData object will be sent as individual FORM parameters to the destination.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Post(System.Uri,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{System.Net.WebClient})">
            <summary>
            Posts the specified data to this url and returns the response as string.
            All items in the postData object will be sent as individual FORM parameters to the destination.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Post(System.Net.WebClient,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the specified data to a url and returns the response as string.
            All items in the postData object will be sent as individual FORM parameters to the destination.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Post(System.Net.WebClient,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            Posts the specified data to a url and returns the response as string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.PostAsync(System.Net.WebClient,System.String,System.Object)">
            <summary>
            Posts the specified data to a URL and returns the response as string asynchronously.
            </summary>
            <param name="postData">An anonymous object containing post data.</param>
        </member>
        <member name="M:System.MSharpExtensions.PostAsync(System.Net.WebClient,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the specified data to a URL and returns the response as string asynchronously.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.PostAsync(System.Net.WebClient,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            Posts the specified data to a URL and returns the response as string asynchronously.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.NullIfDefault``1(``0,``0)">
            <summary>
            Returns a nullable value wrapper object if this value is the default for its type.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToYesNoString(System.Boolean,System.String,System.String)">
            <summary>
            Returns Yes or No string depending on whether the result is true of false.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToYesNoString(System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Returns Yes or No string depending on whether the result is true of false.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Darker(System.Drawing.Color,System.Double)">
            <summary>
            Darkens the specified color.
            </summary>
            <param name="color">The color.</param>
            <param name="pc">The pc.</param>
        </member>
        <member name="M:System.MSharpExtensions.Lighter(System.Drawing.Color,System.Double)">
            <summary>
            Lightens the specified color.
            </summary>
            <param name="color">The color.</param>
            <param name="pc">The pc.</param>
        </member>
        <member name="M:System.MSharpExtensions.AddQueryString(System.Uri,System.String,System.String)">
            <summary>
            Adds the specified query string setting to this Url.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetQueryString(System.Uri)">
            <summary>
            Gets the query string parameters of this Url.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RemoveEmptyQueryParameters(System.Uri)">
            <summary>
            Removes the specified query string parameter.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RemoveQueryString(System.Uri,System.String)">
            <summary>
            Removes the specified query string parameter.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ReplaceQueryString(System.Uri,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Removes all query string parameters of this Url and instead adds the specified ones.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetWebsiteRoot(System.Uri)">
            <summary>
            Gets the root of the requested website.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Download(System.Uri,System.String,System.Int32)">
            <summary>
            Downloads the text in this URL.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.DownloadData(System.Uri,System.String,System.Int32)">
            <summary>
            Downloads the data in this URL.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.DownloadDocument(System.Uri,System.String,System.Int32)">
            <summary>
            Downloads the data in this URL.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ReadAllText(System.IO.Stream)">
            <summary>
            Reads all text in this stream as UTF8.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToString(MSharp.Framework.IEntity,MSharp.Framework.Services.Globalization.ILanguage)">
            <summary>
            Returns the translation of this object's string representation.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.HtmlEncode(System.String)">
            <summary>
            Gets the Html Encoded version of this text.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.HtmlDecode(System.String)">
            <summary>
            Gets the Html Decoded version of this text.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.UrlEncode(System.String)">
            <summary>
            Gets the Url Encoded version of this text.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.UrlDecode(System.String)">
            <summary>
            Gets the Url Decoded version of this text.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.SetQueryString(System.Uri,System.String,System.Object)">
            <summary>
            Properly sets a query string key value in this Uri, returning a new Uri object.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CastTo``1(System.Data.DataTable)">
            <summary>
            Casts this data table's records into a list of typed objects.        
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CastTo``1(System.Data.DataTable,System.Object)">
            <summary>
            Casts this data table's records into a list of typed objects.
            <param name="propertyMappings">An anonymouse object containing property mapping information.
            e.g.: new {Property1 = "Property name in CSV", Property2 = "...", set_Property1 = new Func&lt;string, object&gt;(text => Client.Parse(value)) }</param>
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CastAsDictionary``1(System.Data.DataTable,System.Object)">
            <summary>
            Casts this data table's records into a list of typed objects.
            <param name="propertyMappings">An anonymouse object containing property mapping information.
            e.g.: new {Property1 = "Property name in CSV", Property2 = "...", set_Property1 = new Func&lt;string, object&gt;(text => Client.Parse(value)) }</param>
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.FindPropertyMappings(System.Type,System.Data.DataColumnCollection,System.Object)">
            <summary>
            Finds the property mappings for the specified target type, CSV column names and user declared mappings.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ParseObject``1(System.Data.DataRow,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Func{System.String,System.Object}})">
            <summary>
            Creates an object of the specified type with the specified data and property mappings.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToCSV(System.Data.DataTable)">
            <summary>
            Gets the CSV data equivalent to this data table.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetRows(System.Data.DataTable)">
            <summary>
            Gets the rows of this data table in a LINQ-able format..
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsEnglishHoliday(System.DateTime)">
            <summary>
            Determines if a specified date is an English national holiday or weekend.
            </summary>
        </member>
        <member name="F:System.MSharpExtensions.EarlyMayExceptions">
            <summary>
            Dictionary that contains exceptional dates for Early May Bank Holiday.
            Key: Year, Value: Exceptional Date for that year.
            </summary>
        </member>
        <member name="F:System.MSharpExtensions.SpringBankHolidayExceptions">
            <summary>
            Dictionary that contains exceptional dates for Spring Bank Holiday.
            Key: Year, Value: Exceptional Date for that year.
            </summary>
        </member>
        <member name="F:System.MSharpExtensions.LateSummerBankHolidayExceptions">
            <summary>
            Dictionary that contains exceptional dates for Last Summer Bank Holiday.
            Key: Year, Value: Exceptional Date for that year.
            </summary>
        </member>
        <member name="F:System.MSharpExtensions.AdditionalBankHolidays">
            <summary>
            Dictionary that contains exceptional dates for Last Summer Bank Holiday.
            Key: Year, Value: Exceptional Date for that year.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsAdditionalBankHoliday(System.DateTime)">
            <summary>
            Check if Date it is Additional bank holiday in that year
            </summary>
            <param name="date">the date to check</param>
        </member>
        <member name="M:System.MSharpExtensions.GetUpcoming(System.DateTime,System.DayOfWeek,System.Boolean)">
            <summary>
            Gets the first upcoming specified week day.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetLast(System.DateTime,System.DayOfWeek,System.Boolean)">
            <summary>
            Gets the last occurance of the specified week day.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetEarlyMayBankHoliday(System.Int32)">
            <summary>
            Get Early May Bank Holiday Date for the required year
            </summary>
            <param name="year">the year to check if in that year there is an exception to the normal bank holiday rule</param>
        </member>
        <member name="M:System.MSharpExtensions.GetSpringBankHoliday(System.Int32)">
            <summary>
            Get Spring Bank Holiday Date for the required year
            </summary>
            <param name="year">the year to check if in that year there is an exception to the normal bank holiday rule</param>
        </member>
        <member name="M:System.MSharpExtensions.GetLateSummerBankHoliday(System.Int32)">
            <summary>
            Get Late Summer Bank Holiday Date for the required year
            </summary>
            <param name="year">the year to check if in that year there is an exception to the normal bank holiday rule</param>
        </member>
        <member name="M:System.MSharpExtensions.GetBoxingDay(System.Int32)">
            <summary>
            Get Boxing Day Holiday Date for the required year
            </summary>
            <param name="year">the year to check if in that year there is an exception to the normal bank holiday rule</param>
        </member>
        <member name="M:System.MSharpExtensions.IsInSameWeek(System.DateTime,System.DateTime)">
            <summary>
            Determines whether this day is in the same week (Monday to Sunday) as the specified other date.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsInSameMonth(System.DateTime,System.DateTime)">
            <summary>
            Determines whether this day is in the same month as the specified other date.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.DaysInYear(System.DateTime)">
            <summary>
            Gets the number of days in this year.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.DaysInMonth(System.DateTime)">
            <summary>
            Gets the number of days in this month.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetBeginningOfWeek(System.DateTime)">
            <summary>
            Gets the mid-night of Monday of this week.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetEndOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets one tick before the start of next week.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetBeginningOfMonth(System.DateTime)">
            <summary>
            Gets the mid-night of the first day of this month.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.EndOfDay(System.DateTime)">
            <summary>
            Gets the end of this day (one tick before the next day).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsInTheFuture(System.DateTime)">
            <summary>
            Determines whether this date is in the future.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsTodayOrFuture(System.DateTime)">
            <summary>
            Determines whether this date is in the future.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsToday(System.DateTime)">
            <summary>
            Determines whether this date is in the future.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToSmallTime(System.DateTime)">
            <summary>
            E.g. 4am or 6:30pm.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.NextWorkingDay(System.DateTime,System.Boolean)">
            <summary>
            Gets the next working day.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetDaysInBetween(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Gets the days between this day and the specified other day.
            It will remove TIME information. 
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.PreviousWorkingDay(System.DateTime,System.Boolean)">
            <summary>
            Gets the previous working day.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsBetween(System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Determines whether this date is between two sepcified dates.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CalculateTotalWorkingHours(System.DateTime,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Calculates the total working times in the specified duration which are between the two specified day-hours.
            This can be used to calculate working hours in a particular duration.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetSqlSafeValue(System.DateTime)">
            <summary>
            Returns a MS T-SQL-safe DateTime value for use in queries (i.e. prevents date values earlier than 1/1/1753).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetBeginningOfQuarter(System.DateTime)">
            <summary>
            Returns the Date of the beginning of Quarter for this DateTime value (time will be 00:00:00).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetEndOfQuarter(System.DateTime)">
            <summary>
            Returns the Date of the end of Quarter for this DateTime value (time will be 11:59:59).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetEndOfMonth(System.DateTime)">
            <summary>
            Returns the Date of the end of Quarter for this DateTime value (time will be 11:59:59).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetLast(System.DateTime,System.CalendarMonth,System.Int32)">
            <summary>
            Gets the last date with the specified month and day.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetNext(System.DateTime,System.CalendarMonth,System.Int32)">
            <summary>
            Gets the last date with the specified month and day.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetEndOfYear(System.DateTime)">
            <summary>
            Returns the Date of the end of Quarter for this DateTime value (time will be 11:59:59).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Min(System.DateTime,System.DateTime)">
            <summary>
            Gets the minimum value between this date and a specified other date.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Max(System.DateTime,System.DateTime)">
            <summary>
            Gets the maximum value between this date and a specified other date.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of weeks and returns the result.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetLast(System.DateTime,System.DayOfWeek,System.TimeSpan)">
            <summary>
            Gets the latest date with the specified day of week and time that is before (or same as) this date.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToLocal(System.Nullable{System.DateTime})">
            <summary>
            Returns the local time equivalent of this UTC date value based on the TimeZone specified in Localtime.TimeZoneProvider.
            Use this instead of ToLocalTime() so you get control over the TimeZone.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToLocal(System.DateTime)">
            <summary>
            Returns the local time equivalent of this UTC date value based on the TimeZone specified in Localtime.CurrentTimeZone().
            Use this instead of ToLocalTime() so you get control over the TimeZone.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToUniversal(System.Nullable{System.DateTime})">
            <summary>
            Returns the equivalent Universal Time (UTC) of this local date value.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToUniversal(System.DateTime)">
            <summary>
            Returns the equivalent Universal Time (UTC) of this local date value.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToUniversal(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Returns the equivalent Universal Time (UTC) of this local date value.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RoundToSecond(System.DateTime)">
            <summary>
             Rounds this up to the nearest whole second.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RoundToMinute(System.DateTime)">
            <summary>
             Rounds this up to the nearest whole minute.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RoundToHour(System.DateTime)">
            <summary>
             Rounds this up to the nearest whole hour.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Round(System.DateTime,System.TimeSpan)">
            <summary>
             Rounds this up to the nearest interval (e.g. second, minute, hour, etc).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Invoke(System.Action,System.Int32,System.TimeSpan,System.Action{System.Exception})">
            <summary>
            Invokes the specified action for the specified number of times.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="retries">The number of times to try running the action.</param>
            <param name="waitBeforeRetries">The time to wait before every two retries.</param>
            <param name="onEveryError">The action to run every time the method invokation fails. You can use this to log the error.</param>
        </member>
        <member name="M:System.MSharpExtensions.Invoke``1(System.Func{``0},System.Int32,System.TimeSpan,System.Action{System.Exception})">
            <summary>
            Invokes the specified function for the specified number of times.
            </summary>
            <param name="function">The function to evaluate.</param>
            <param name="retries">The number of times to try running the action.</param>
            <param name="waitBeforeRetries">The time to wait before every two retries.</param>
            <param name="onEveryError">The action to run every time the method invokation fails. You can use this to log the error.</param>
        </member>
        <member name="M:System.MSharpExtensions.InvokeWithTimeout(System.Action,System.TimeSpan)">
            <summary>
            Invokes this action with the specified timeout.
            If the specified time is up, a TimeoutException will be raised.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Delete(System.IO.DirectoryInfo,System.Boolean,System.Boolean)">
            <summary>
            If specified as recursive and harshly, then it tries multiple times to delete this directory.        
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.HarshDelete(System.IO.DirectoryInfo)">
            <summary>
            Will try to delete a specified directory by first deleting its sub-folders and files.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CopyTo(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Copies the entire content of a directory to a specified destination.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.HasExeContent(System.IO.FileInfo)">
            <summary>
            Determines whether the file's contents start with MZ which is the signature for EXE files.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CopyTo(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Copies the entire content of a directory to a specified destination.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CopyTo(System.IO.FileInfo,System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Copies this file to a specified destination directiry with the original file name.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetFile(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets a file info with the specified name under this folder. That file does not have to exist already.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetSubDirectory(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Gets a subdirectory with the specified name, or null if it doesn't exist.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetOrCreateSubDirectory(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets or creates a subdirectory with the specified name.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetDirectories(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Gets the subdirectory tree of this directory.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.EnsureExists(System.IO.DirectoryInfo)">
            <summary>
            Creates the directory if it doesn't already exist.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Clear(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Clears the specified folder by deleting all its sub-directories and files.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsEmpty(System.IO.DirectoryInfo)">
            <summary>
            Determines whether this folder is empty of any files or sub-directories.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Round(System.Double,System.Int32)">
            <summary>
            Rounds this value.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Round(System.Decimal,System.Int32)">
            <summary>
            Rounds this value.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Truncate(System.Double,System.Int32)">
            <summary>
            In mathematics and computer science, truncation is the term for limiting the number of digits right of the decimal point, by discarding the least significant ones.
            Note that in some cases, truncating would yield the same result as rounding, but truncation does not round up or round down the digits; it merely cuts off at the specified digit.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToShortMoneyString(System.Double)">
            <summary>
            Drops the floating point digits from the end of the money string.
            For example for 1500.00 it will yield "£1,500" and for 18.56 it will yield "£18.56".
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToInformalMoneyString(System.Double)">
            <summary>
            Drops the floating point digits from the end of the money string.
            For example for 1500.00 it will yield "£1,500" and for 18.56 it will yield "£18.56".
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToDateFromOA(System.Double)">
            <summary>
            Converts this OA date value to a DateTime object.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToDateFromOA(System.Nullable{System.Double})">
            <summary>
            Converts this OA date value to a DateTime object.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToRadians(System.Double)">
            <summary>
            Converts degree into radians.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AsPercentageOf(System.Double,System.Double,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Return this value as a percentages the of the given total.
            </summary>       
        </member>
        <member name="M:System.MSharpExtensions.AsPercentageOf(System.Decimal,System.Decimal,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Return this value as a percentages the of the given total.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RoundUpToNearest(System.Double,System.Double)">
            <summary>
            Rounds up to nearest value.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RoundUpToNearest(System.Decimal,System.Decimal)">
            <summary>
            Rounds up to nearest value.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RoundDownToNearest(System.Double,System.Double)">
            <summary>
            Rounds down to nearest value with the intervals specified.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RoundDownToNearest(System.Decimal,System.Decimal)">
            <summary>
            Rounds down to nearest value with the intervals specified.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AlmostEquals(System.Double,System.Double,System.Double)">
            <summary>
            Determines if this double value is almost equal to the specified other value.
            This should be used instead of == or != operators due to the nature of double processing in .NET.
            </summary>
            <param name="tolerance">Specifies the tolerated level of difference.</param>
        </member>
        <member name="M:System.MSharpExtensions.AlmostEquals(System.Single,System.Single,System.Single)">
            <summary>
            Determines if this float value is almost equal to the specified other value.
            This should be used instead of == or != operators due to the nature of float processing in .NET.
            </summary>
            <param name="tolerance">Specifies the tolerated level of difference.</param>
        </member>
        <member name="M:System.MSharpExtensions.GetEmbeddedResourceName(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Gets the embedded resource name for a specified relative file path in the project.
            If the resulting resource name does not exist in this assembly it will throw.
            </summary>
            <param name="rootNamespace">The default namespace of your Visual Studio project.</param>
            <param name="fileRelativePath">For example MyRootFolder\MySubFolder\MyFile.cs (this is case sensitive).</param>
        </member>
        <member name="M:System.MSharpExtensions.ReadEmbeddedResourceAsync(System.Reflection.Assembly,System.String,System.String)">
            <param name="rootNamespace">The default namespace of your Visual Studio project.</param>
            <param name="fileRelativePath">For example MyRootFolder\MySubFolder\MyFile.cs (this is case sensitive).</param>
        </member>
        <member name="M:System.MSharpExtensions.ReadEmbeddedTextFileAsync(System.Reflection.Assembly,System.String,System.String)">
            <param name="rootNamespace">The default namespace of your Visual Studio project.</param>
            <param name="fileRelativePath">For example MyRootFolder\MySubFolder\MyFile.cs (this is case sensitive).</param>
        </member>
        <member name="M:System.MSharpExtensions.ReadEmbeddedResource(System.Reflection.Assembly,System.String,System.String)">
            <param name="rootNamespace">The default namespace of your Visual Studio project.</param>
            <param name="fileRelativePath">For example MyRootFolder\MySubFolder\MyFile.cs (this is case sensitive).</param>
        </member>
        <member name="M:System.MSharpExtensions.ReadEmbeddedTextFile(System.Reflection.Assembly,System.String,System.String)">
            <param name="rootNamespace">The default namespace of your Visual Studio project.</param>
            <param name="fileRelativePath">For example MyRootFolder\MySubFolder\MyFile.cs (this is case sensitive).</param>
        </member>
        <member name="M:System.MSharpExtensions.IsAnyOf``1(``0,``0[])">
            <summary>
            Determines if this item is in a specified list of specified items.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsAnyOf``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this item is in a specified list of specified items.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsNoneOf``1(``0,``0[])">
            <summary>
            Determines if this item is none of a list of specified items.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsNoneOf``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this item is none of a list of specified items.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CloneAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Clones all items of this collection.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsImage(MSharp.Framework.Document)">
            <summary>
            Determines whether this document is an image.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetFullIdentifierString(MSharp.Framework.IEntity)">
            <summary>
            Gets the id of this entity.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ValidateAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Validates all entities in this collection.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.OnlyWhen``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            Returns this Entity only if the given predicate evaluates to true and this is not null.
            </summary>        
        </member>
        <member name="M:System.MSharpExtensions.IDs``1(System.Collections.Generic.IEnumerable{MSharp.Framework.IEntity{``0}})">
            <summary>
            Returns all entity Guid IDs for this collection.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToFullMessage(System.Exception,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a more complete text dump of this exception, than just its text.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToLogString(System.Exception,System.String)">
            <summary>
            <para>Creates a log-string from the Exception.</para>
            <para>The result includes the stacktrace, innerexception et cetera, separated by <seealso cref = "P:System.Environment.NewLine"/>.</para>
            </summary>
            <param name = "ex">The exception to create the string from.</param>
            <param name = "additionalMessage">Additional message to place at the top of the string, maybe be empty or null.</param>
        </member>
        <member name="M:System.MSharpExtensions.AddData(System.Exception,System.String,System.Object)">
            <summary>
            Adds a piece of data to this exception.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ReadAllBytes(System.IO.FileInfo)">
            <summary>
            Gets the entire content of this file.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ReadAllText(System.IO.FileInfo)">
            <summary>
            Gets the entire content of this file.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ReadAllText(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Gets the entire content of this file.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ReadAllBytesAsync(System.IO.Stream)">
            <summary>
            Will set the Position to zero, and then copy all bytes to a memory stream's buffer.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Delete(System.IO.FileInfo,System.Boolean)">
            <summary>
            Will try to delete a specified directory by first deleting its sub-folders and files.
            </summary>
            <param name="harshly">If set to true, then it will try multiple times, in case the file is temporarily locked.</param>
        </member>
        <member name="M:System.MSharpExtensions.WriteAllBytes(System.IO.FileInfo,System.Byte[])">
            <summary>
            Saves the specified content on this file.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WriteAllText(System.IO.FileInfo,System.String)">
            <summary>
            Saves the specified content on this file using the Western European Windows Encoding 1252.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WriteAllText(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Saves the specified content on this file. 
            Note: For backward compatibility, for UTF-8 encoding, it will always add the BOM signature.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AppendAllText(System.IO.FileInfo,System.String)">
            <summary>
            Saves the specified content to the end of this file.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AppendLine(System.IO.FileInfo,System.String)">
            <summary>
            Saves the specified content to the end of this file.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AppendAllText(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Saves the specified content to the end of this file.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CopyTo(System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
            <summary>
            Copies this file onto the specified desination path.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WriteWhenDifferent(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Writes the specified content on this file, only when this file does not already have the same content.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Exists(System.IO.DirectoryInfo)">
            <summary>
            Determines whether or not this directory exists.
            Note: The standard Exists property has a caching bug, so use this for accurate result.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Exists(System.IO.FileInfo)">
            <summary>
            Determines whether or not this file exists. 
            Note: The standard Exists property has a caching bug, so use this for accurate result.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GZip(System.Byte[])">
            <summary>
            Compresses this data into Gzip.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GZip(System.String)">
            <summary>
            Compresses this string into Gzip. By default it will use UTF8 encoding.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GZip(System.String,System.Text.Encoding)">
            <summary>
            Compresses this string into Gzip.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetSize(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Gets the total size of all files in this directory.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetSizeText(System.IO.DirectoryInfo,System.Boolean,System.Int32)">
            <summary>
            Gets the size of this folder in human readable text.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetSizeText(System.IO.FileInfo,System.Int32)">
            <summary>
            Gets the size of this file in human readable text.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToSafeFileName(System.String,System.Char)">
            <summary>
            Detects the characters which are not acceptable in File System and replaces them with a hyphen.
            </summary>
            <param name="replacement">The character with which to replace invalid characters in the name.</param>
        </member>
        <member name="M:System.MSharpExtensions.ToVirtualPath(System.IO.FileInfo)">
            <summary>
            Gets a virtual URL to this file. If the file is not in the current website folder it throws an exception.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Execute(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            Executes this EXE file and returns the standard output.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Execute(System.IO.FileInfo,System.String,System.Boolean,System.Action{System.Diagnostics.Process})">
            <summary>
            Executes this EXE file and returns the standard output.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetMimeType(System.IO.FileInfo)">
            <summary>
            Gets the mime type based on the file extension.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetFilesOrEmpty(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets the files in this folder. If this folder is null or non-existent it will return an empty array.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WriteAllTextAsync(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <param name="encoding">By default it will be UTF-8</param>
        </member>
        <member name="M:System.MSharpExtensions.ExistsOrThrow(System.IO.FileInfo)">
            <summary>
            If this file exists, it will simply return it. 
            Otherwise it will throw a FileNotFoundException with the message of 'File not found: {path}'.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ExistsOrThrow(System.IO.DirectoryInfo)">
            <summary>
            If this directory exists, it will simply return it. 
            Otherwise it will throw a DirectoryNotFoundException with the message of 'Directory not found: {path}'.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Shorten(System.Guid)">
            <summary>
            Shortens this GUID.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.To``1(System.Nullable{System.Guid})">
            <summary>
            This will use Database.Get() to load the specified entity type with this ID.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.To``1(System.Guid)">
            <summary>
            This will use Database.Get() to load the specified entity type with this ID.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetFullPath(MSharp.Framework.Services.IHierarchy)">
            <summary>
            Gets the full path of this hirarchical entity, seperated by " > ".
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsRootNode(MSharp.Framework.Services.IHierarchy)">
            <summary>
            Gets whether this node is a root hierarchy node.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetFullPath(MSharp.Framework.Services.IHierarchy,System.String)">
            <summary>
            Gets the full path of this hirarchical entity, seperated by a specified seperation string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WithAllChildren(MSharp.Framework.Services.IHierarchy)">
            <summary>
            Gets this node as well as all its children hierarchy.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetAllChildren(MSharp.Framework.Services.IHierarchy)">
            <summary>
            Gets all children hierarchy of this node.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WithAllParents(MSharp.Framework.Services.IHierarchy)">
            <summary>
            Gets this node as well as all its parents hierarchy.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetAllParents(MSharp.Framework.Services.IHierarchy)">
            <summary>
            Gets all parents hierarchy of this node.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WithAllParents``1(``0)">
            <summary>
            Gets this node as well as all its parents hierarchy.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetAllParents``1(MSharp.Framework.Services.IHierarchy)">
            <summary>
            Gets all parents hierarchy of this node.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RoundUpToNearest(System.Int32,System.Int32)">
            <summary>
            Rounds up to nearest value with the intervals specified.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RoundDownToNearest(System.Int32,System.Int32)">
            <summary>
            Rounds down to nearest value with the intervals specified.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToBase32(System.Int32)">
            <summary>
            Converts this number to a short textual representation.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToWordString(System.Int32)">
            <summary>
            To the word string.
            </summary>
            <remarks>
            Some awesome code from http://stackoverflow.com/questions/2729752/converting-numbers-in-to-words-c-sharp
            </remarks>
            <param name="number">The number.</param>
        </member>
        <member name="M:System.MSharpExtensions.ToFileSizeString(System.Int64,System.String,System.Int32)">
            <summary>
            Emits a user readable file size (including units).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToFileSizeString(System.Int32,System.Int32)">
            <summary>
            Gets the size text for the given number of bytes. E.g. 4.5MB or 11KB.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToFileSizeString(System.Int64,System.Int32)">
            <summary>
            Gets the size text for the given number of bytes.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToFileSizeString(System.Int32,System.String,System.Int32)">
            <summary>
            Emits a user readable file size (including units).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AsPercentageOf(System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Return this value as a percentages the of the given total.
            </summary>
            <param name="value">The value.</param>
            <param name="total">The total.</param>
            <param name="multiplyBy100">Multiply this by 100.</param>
            <param name="roundTo">Rounding decimals to.</param>
        </member>
        <member name="F:System.MSharpExtensions.NumberWordsUnits">
            <summary> Static mapping array, used by ToWordString for Units. </summary>
        </member>
        <member name="F:System.MSharpExtensions.NumberWordsTens">
            <summary> Static mapping array, used by ToWordString for Tens. </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToOrdinal(System.Int32)">
            <summary>
            E.g. converts 1 to 1st. Or converts 13 to 13th.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToGuid(System.Int32)">
            <summary>
            Concerts this integer value to GUID.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Gets the index of the first item in this list which matches the specified criteria.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Add``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Adds all items from a specified dictionary to this dictionary.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Gets all items of this list except those meeting a specified criteria.
            </summary>
            <param name="criteria">Exclusion criteria</param>
        </member>
        <member name="M:System.MSharpExtensions.ExceptNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.TimeSpan}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Boolean}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.DateTime}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Guid}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified list to the beginning of this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Adds the specified item(s) to the beginning of this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Do``1(System.Collections.Generic.IEnumerable{``0},System.MSharpExtensions.ItemHandler{``0})">
            <summary>
            Performs an action for all items within the list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs an action for all items within the list.
            It will provide the index of the item in the list to the action handler as well.
            </summary>        
        </member>
        <member name="M:System.MSharpExtensions.Cast(System.Collections.IEnumerable,System.Type)">
            <summary>
            Creates a list of the specified runtime type including all items of this collection.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the minimum value of a specified expression in this list. If the list is empty, then the default value of the expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the maximum value of a specified expression in this list. If the list is empty, then the default value of the expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.MaxOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>
            Gets the maximum value of the specified expression in this list. 
            If no items exist in the list then null will be returned. 
            </summary>     
        </member>
        <member name="M:System.MSharpExtensions.MaxOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the maximum value of the specified expression in this list. 
            If no items exist in the list then null will be returned. 
            </summary>     
        </member>
        <member name="M:System.MSharpExtensions.MinOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>
            Gets the minimum value of the specified expression in this list. 
            If no items exist in the list then null will be returned. 
            </summary>     
        </member>
        <member name="M:System.MSharpExtensions.MinOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the minimum value of the specified expression in this list. 
            If no items exist in the list then null will be returned. 
            </summary>     
        </member>
        <member name="M:System.MSharpExtensions.OrderBy(System.Collections.IEnumerable,System.String)">
            <summary>
            Sorts this list by the specified property name.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsEquivalentTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether this list is equivalent to another specified list. Items in the list should be distinct for accurate result.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Counts the number of items in this list matching the specified criteria.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.PickRandom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Picks an item from the list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Lacks``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Works as opposite of Contains().
            </summary>        
        </member>
        <member name="M:System.MSharpExtensions.LacksAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this list lacks any item in the specified list.
            </summary>        
        </member>
        <member name="M:System.MSharpExtensions.LacksAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this list lacks all items in the specified list.
            </summary>        
        </member>
        <member name="M:System.MSharpExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Returns a subset of the items in a given collection in a range including the items at lower and upper bounds.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines of this list contains all items of another given list.
            </summary>        
        </member>
        <member name="M:System.MSharpExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Determines if this list contains any of the specified items.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines if none of the items in this list meet a given criteria.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.None``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this is null or an empty list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.HasAny``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            A null safe alternative to Any(). If the source is null it will return false instead of throwing an exception.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Intersects``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this list intersects with another specified list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Intersects``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Determines if this list intersects with another specified list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WithMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Selects the item with maximum of the specified value.
            If this list is empty, NULL (or default of T) will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WithMin``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Selects the item with minimum of the specified value.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetElementAfter``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets the element after a specified item in this list.
            If the specified element does not exist in this list, an ArgumentException will be thrown.
            If the specified element is the last in the list, NULL will be returned.
            </summary>        
        </member>
        <member name="M:System.MSharpExtensions.GetElementBefore``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets the element before a specified item in this list.
            If the specified element does not exist in this list, an ArgumentException will be thrown.
            If the specified element is the first in the list, NULL will be returned.
            </summary>        
        </member>
        <member name="M:System.MSharpExtensions.Remove``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes a list of items from this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AreItemsUnique``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if all items in this collection are unique.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Returns the union of this list with the specified other lists.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Returns the union of this list with the specified items.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Trim(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Trims all elements in this list and excludes all null and "empty string" elements from the list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Contains(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Determines whether this list of strings contains the specified string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Lacks(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Determines whether this list of strings contains the specified string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToLinesString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concats all elements in this list with Environment.NewLine.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.TryGet``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value with the specified key, or null.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Chop``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Chops a list into same-size smaller lists. For example:
            new int[] { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 }.Chop(5)
            will return: { {1,2,3,4,5}, {6,7,8,9,10}, {11,12,13,14,15}, {16} }
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetKeys``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Gets the keys of this dictionary.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.TimeSpan})">
            <summary>
            Returns the sum of a timespan selector on this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AllIndicesOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the indices of all items which matche a specified criteria.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Replace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Replaces the specified item in this list with the specified new item.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetAllValues``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Gets all values from this dictionary.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetAllValues``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets all values from this dictionary.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ExceptAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Returns all elements of this list except those at the specified indices.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ExceptLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns all elements of this list except the last X items.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ExceptFirst``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns all elements of this list except the first X items.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RemoveNulls``1(System.Collections.Generic.IList{``0})">
            <summary>
            Removes the nulls from this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.TryRemove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            Tries to the remove an item with the specified key from this dictionary.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.TryRemoveAt``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},System.Int32)">
            <summary>
            Tries to the remove an item with the specified key from this dictionary.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetValues(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets all the values in this collection.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts this collection to a dictionary.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ContainsAtLeast(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Determines whether this least contains at least the specified number of items.
            This can be faster than calling "x.Count() >= N" for complex iterators.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToNameValueCollection``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts this to a KeyValueCollection.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AddFromProperties``1(System.Collections.Generic.Dictionary{System.String,``0},System.Object)">
            <summary>
            Adds the properties of a specified [anonymous] object as items to this dictionary.
            It ignores duplicate entries and null values.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Add``2(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``1)">
            <summary>
            Adds the specified key/value pair to this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified items to this set.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.DequeueAll``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Dequeues all queued items in the right order.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a HashSet of type T (use for performance in place of ToList()).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AllIndicesOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets all indices of the specified item in this collection.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.OrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an empty collection if this collection is null.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Returns a DataTable with columns based on the public properties of type T and the rows
            populated with the values in those properties for each item in this IEnumerable.
            </summary>
            <param name="tableName">Optional name for the DataTable (defaults to the plural of the name of type T).</param>
        </member>
        <member name="M:System.MSharpExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{``0})">
            <summary>
            Determines if the specified item exists in this list. 
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Lacks``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{``0})">
            <summary>
            Determines if the specified item exists in this list. 
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsAnyOf``1(System.Nullable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this item is in the specified list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ContainsAny(System.Collections.Generic.IEnumerable{System.Guid},System.Nullable{System.Guid}[])">
            <summary>
            Specifies whether this list contains any of the specified values.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Median(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Finds the median of a list of integers
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Or``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            If this list is null or empty, then the specified alternative will be returned, otherwise this will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Perform``1(``0,System.Action{``0})">
            <summary>
            Performs a specified action on this item if it is not null. If it is null, it simply ignores the action.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get``2(``0,System.Func{``0,``1})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get``2(``0,System.Func{``0,System.Nullable{``1}})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get``1(System.Nullable{System.TimeSpan},System.Func{System.TimeSpan,``0})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get``1(``0,System.Func{``0,System.Guid})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get``1(``0,System.Func{``0,System.Int32})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get``1(``0,System.Func{``0,System.Double})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get``1(``0,System.Func{``0,System.Decimal})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get(System.Nullable{System.DateTime},System.Func{System.Nullable{System.DateTime},System.String})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get``1(``0,System.Func{``0,System.Byte})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get``1(``0,System.Func{``0,System.DateTime})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get``1(``0,System.Func{``0,System.Nullable{System.DateTime}})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get``1(System.Nullable{System.DateTime},System.Func{System.Nullable{System.DateTime},``0})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.NextBoolean(System.Random,System.Double)">
            <summary>
            Gets a random boolean value with the specified chance (0-100).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.NextBoolean(System.Random)">
            <summary>
            Gets a random boolean value.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.NextAlphaNumericString(System.Random,System.Int32,System.Boolean)">
            <summary>
            Generates and returns a Random alphanumeric string.
            </summary>
            <param name="rng">Random instance.</param>
            <param name="length">Length of string to return</param>
            <param name="omitConfusableCharacters">Pass true to miss-out letters that can be confused with numbers (BDIOS)</param>
            <returns>String instance containing random alphanumeric characters.</returns>
        </member>
        <member name="M:System.MSharpExtensions.PickNumbers(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns [quantity] number of unique random integers within the given range.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToString(System.Range{System.DateTime},System.String)">
            <summary>
            Returns a formatted string based on this Range&lt;DateTime&gt; object and the given string format.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetIntervals(System.Range{System.Double},System.Double)">
            <summary>
            Gets all possible items in the range based on the specified intervals.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetIntervals(System.Range{System.Decimal},System.Decimal)">
            <summary>
            Gets all possible items in the range based on the specified intervals.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetIntervals(System.Range{System.Int32},System.Int32)">
            <summary>
            Gets all possible items in the range based on the specified intervals.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.MergeAdjacents(System.Collections.Generic.IEnumerable{System.Range{System.DateTime}},System.TimeSpan)">
            <summary>
            Merges adjecant items in this list if their gap is within the specified tolerance.
            The result will be another list of ranges with potentially fewer (but larger) ranges.
            Consider sorting the items before calling this method.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Overlap``1(System.Collections.Generic.IEnumerable{System.Range{``0}},System.Boolean)">
            <summary>
            Determines if there is any overlap between any two ranges in this list of ranges.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetParentTypes(System.Type)">
            <summary>
            Gets all parent types hierarchy for this type.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.InhritsFrom(System.Type,System.Type)">
            <summary>
            Determines whether this type inherits from a specified base type, either directly or indirectly.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetCSharpName(System.Type,System.Boolean)">
            <summary>
            Retuns the name of this type in the same way that is used in C# programming.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the value of this property on the specified object.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.SetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Set the value of this property on the specified object.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Add``2(System.Collections.Generic.IDictionary{System.Type,System.Type})">
            <summary>
            Adds the specified types pair to this type dictionary.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates the instance of this type.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Defines``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether it has a specified attribute applied to it.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            Creates the instance of this type casted to the specified type.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsNullable(System.Type)">
            <summary>
            Determines if this type is a nullable of something.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Is``1(System.Reflection.PropertyInfo,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether this property info is the specified property (in lambda expression).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsStatic(System.Type)">
            <summary>
            Determines whether this type is static.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetSubTypes(System.Reflection.Assembly,System.Type)">
            <summary>
            Gets all types in this assembly that are directly inherited from a specified base type.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetProgrammingName(System.Type)">
            <summary>
            Gets the full programming name of this type. Unlike the standard FullName property, it handles Generic types properly.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetProgrammingName(System.Type,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the full programming name of this type. Unlike the standard FullName property, it handles Generic types properly.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsGenericOf(System.Type,System.Type,System.Type[])">
            <summary>
            Determines if this type is a generic class  of the specified type.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the specified property.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetPropertyName``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the specified property.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetPropertyName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the specified property.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetMember``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property name for a specified expression.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property name for a specified expression.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetRootEntityType(System.Type)">
            <summary>
            Gets the root entity type of this type.
            If this type inherits directly from Entity&lt;T&gt; then it will be returned, otherwise its parent...
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.FindImplementerClasses(System.Type)">
            <summary>
            Gets all types in the current appDomain which implement this interface.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CreateNew(System.Threading.Thread,System.Action)">
            <summary>
            Creates a new thread and copies the current Culture and UI Culture.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CreateNew(System.Threading.Thread,System.Action,System.Action{System.Threading.Thread})">
            <summary>
            Creates a new thread and copies the current Culture and UI Culture.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for this type. It's equivalent to default(T).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetDisplayName(System.Reflection.MemberInfo)">
            <summary>
            If it specifies DisplayNameAttribute the value from that will be returned.
            Otherwise it returns natural English literal text for the name of this member.
            For example it coverts "ThisIsSomething" to "This is something".
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsStatic(System.Reflection.PropertyInfo)">
            <summary>
            Determine whether this property is static.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Await(System.Threading.Tasks.Task)">
            <summary>
            Awaits this task. Use this method to skip the Visual Studio warning on calling async methods in sync callers.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AwaitResult``1(System.Threading.Tasks.Task{``0})">
            <summary>
            It works similar to calling .Result property, but it forces a context switch to prevent deadlocks in UI and ASP.NET context.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.InvokeStatic(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Invokes this static method.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetEnumerableItemType(System.Type)">
            <summary>
            If this type implements IEnumerable«T» it returns typeof(T).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Is``1(System.String)">
            <summary>
            Determines whether this string can be converted to the specified type.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.TryParseAs``1(System.String)">
            <summary>
            Tries to parse this text to the specified type.
            Returns null if parsing is not possible.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.To``1(System.String)">
            <summary>
            It converts this text to the specified data type. 
            It supports all primitive types, Enums, Guid, XElement, XDocument, Color, ...
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.To(System.String,System.Type)">
            <summary>
            Converts the value of this string object into the specified target type.
            It supports all primitive types, Enums, Guid, XElement, XDocument, Color, ...
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.TrimStart(System.String,System.String)">
            <summary>
            Removes the specified text from the start of this string instance.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.TrimEnd(System.String,System.Int32)">
            <summary>
            Trims the end of this instance of string with the specified number of characters.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.TrimOrNull(System.String)">
            <summary>
            If this string object is null, it will return null. Otherwise it will trim the text and return it.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.TrimOrEmpty(System.String)">
            <summary>
            If this string object is null, it will return empty string. Otherwise it will trim the text and return it.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToLowerOrEmpty(System.String)">
            <summary>
            Returns a copy of this text converted to lower case. If it is null it will return empty string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToUpperOrEmpty(System.String)">
            <summary>
            Returns a copy of this text converted to upper case. If it is null it will return empty string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsEmpty(System.String)">
            <summary>
            Determines whether this instance of string is null or empty.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.HasValue(System.String)">
            <summary>
            Determines whether this instance of string is not null or empty.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToHtmlLines(System.String)">
            <summary>
            Will replace all line breaks with a BR tag and return the result as a raw html.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToHtmlLines``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Will join all items with a BR tag and return the result as a raw html.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Or(System.String,System.String)">
            <summary>
            Gets the same string if it is not null or empty. Otherwise it returns the specified default value.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Or(System.String,System.Func{System.String})">
            <summary>
            Gets the same string if it is not null or empty.
            Otherwise it invokes the specified default value provider and returns the result.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Unless(System.String,System.String)">
            <summary>
            Gets the same string unless it is the same as the specified text. If they are the same, empty string will be returned.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Summarize(System.String,System.Int32,System.Boolean)">
            <summary>
            Summarizes the specified source.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Summarize(System.String,System.Int32)">
            <summary>
            Summarizes the specified text.
            </summary>        
        </member>
        <member name="M:System.MSharpExtensions.TrimEnd(System.String,System.String)">
            <summary>
            Trims some unnecessary text from the end of this string, if it exists.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.TrimEnd(System.String,System.String,System.Boolean)">
            <summary>
            Trims some unnecessary text from the end of this string, if it exists.
            </summary>
            <param name="caseSensitive">By default it's TRUE.</param>
        </member>
        <member name="M:System.MSharpExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns the last few characters of the string with a length
            specified by the given parameter. If the string's length is less than the 
            given length the complete string is returned. If length is zero or 
            less an empty string is returned
            </summary>
            <param name="length">Number of characters to return</param>
        </member>
        <member name="M:System.MSharpExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns the first few characters of the string with a length
            specified by the given parameter. If the string's length is less than the 
            given length the complete string is returned. If length is zero or 
            less an empty string is returned
            </summary>
            <param name="length">Number of characters to return</param>
        </member>
        <member name="M:System.MSharpExtensions.EndsWithAny(System.String,System.String[])">
            <summary>
            Gets whether this string item ends with any of the specified items.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RemoveHtmlTags(System.String)">
            <summary>
            Removes all Html tags from this html string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AllIndicesOf(System.String,System.String)">
            <summary>
            Gets all indices of a specified string inside this text.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WithPrefix(System.String,System.String)">
            <summary>
            Returns this text with the specified prefix if this has a value. If this text is empty or null, it will return empty string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WithSuffix(System.String,System.String)">
            <summary>
            Returns this text with the specified suffix if this has a value. If this text is empty or null, it will return empty string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WithWrappers(System.String,System.String,System.String)">
            <summary>
            Wraps this text between the left and right wrappers, only if this has a value.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Repeat(System.String,System.Int32)">
            <summary>
            Repeats this text by the number of times specified.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Repeat(System.String,System.Int32,System.String)">
            <summary>
            Repeats this text by the number of times specified, seperated with the specified seperator.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Determines if this string value contains a specified substring.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Remove(System.String,System.String,System.String[])">
            <summary>
            Removes the specified substrings from this string object.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Remove(System.String,System.String)">
            <summary>
            Removes the specified substrings from this string object.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.KeepReplacing(System.String,System.String,System.String)">
            <summary>
            Replaces all occurances of a specified phrase to a substitude, even if the original phrase gets produced again as the result of substitution. Note: It's an expensive call.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.OnlyWhen(System.String,System.Boolean)">
            <summary>
            Gets this same string when a specified condition is True, otherwise it returns empty string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Unless(System.String,System.Boolean)">
            <summary>
            Gets this same string when a specified condition is False, otherwise it returns empty string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToLines(System.String)">
            <summary>
            Gets the lines of this string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsUpper(System.Char)">
            <summary>
            Indicates whether this character is categorized as an uppercase letter.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsLower(System.Char)">
            <summary>
            Indicates whether this character is categorized as a lowercase letter.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsLetter(System.Char)">
            <summary>
            Indicates whether this character is categorized as a letter.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsDigit(System.Char)">
            <summary>
            Indicates whether this character is categorized as digit.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether this character is categorized as White Space (space, tab, new line, etc).
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.IsLetterOrDigit(System.Char)">
            <summary>
            Indicates whether this character is categorized as a letter or digit.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToUpper(System.Char)">
            <summary>
            Converts the value of this character to its uppercase equivalent.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToLower(System.Char)">
            <summary>
            Converts the value of this character to its lowercase equivalent.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToStringOrEmpty(System.Object)">
            <summary>
            If this expression is null, returns an empty string. Otherwise, it returns the ToString() of this instance.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Lacks(System.String,System.String,System.Boolean)">
            <summary>
            Determines whether this string object does not contain the specified phrase.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.LacksAll(System.String,System.String[])">
            <summary>
            Determines whether this string object does not contain any of the specified phrases.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.LacksAll(System.String,System.Boolean,System.String[])">
            <summary>
            Determines whether this string object does not contain any of the specified phrases.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToLiteralFromPascalCase(System.String)">
            <summary>
            Returns natural English literal text for a specified pascal case string value.
            For example it coverts "ThisIsSomething" to "This is something".
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToLower(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the all-lower-case version of this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToUpper(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the all-upper-case version of this list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetUtf8WithSignatureBytes(System.String)">
            <summary>
            Gets the UTF8-with-signature bytes of this text.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToBase64String(System.Byte[])">
            <summary>
            Converts this array of bytes to a Base64 string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Determines whether this text contains any of the specified keywords.
            If the keywords list contains a null or empty string, it throws an exception. If you wish to ignore those, use .Trim() on your keywords list.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Split(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Splits this list of string items by a specified separator into a number of smaller lists of string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AsFile(System.String)">
            <summary>
            Converts this path into a file object.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AsFile(System.String,System.Boolean)">
            <summary>
            It will search in all environment PATH directories, as well as the current directory, to find this file.
            For example for 'git.exe' it will return `C:\Program Files\Git\bin\git.exe`.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AsUri(System.String)">
            <summary>
            Converts this path into a Uri object.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AsDirectory(System.String)">
            <summary>
            Converts this path into a directory object.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.XmlEncode(System.String)">
            <summary>
            Gets the Xml Encoded version of this text.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.XmlDecode(System.String)">
            <summary>
            Gets the Xml Decoded version of this text.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CreateHash(System.String,System.Object)">
            <summary>
            Creates a hash of a specified clear text with a mix of MD5 and SHA1.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CreateMD5Hash(System.String,System.Boolean)">
            <summary>
            Creates MD5 hash of this text
            <param name="asHex">Specifies whether a hex-compatible string is expected.</param>
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CreateMD5Hash(System.String)">
            <summary>
            Creates MD5 hash of this text
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CreateSHA1Hash(System.String)">
            <summary>
            Creates SHA1 hash of this text
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToJsonText(System.String)">
            <summary>
            Escapes all invalid characters of this string to it's usable as a valid json constant.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToSimplifiedSHA1Hash(System.String)">
            <summary>
            Getsa SHA1 hash of this text where all characters are alpha numeric.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.TryParseEnum``1(System.String,System.Nullable{``0})">
            <summary>
            Attempts to Parse this String as the given Enum type.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.OrEmpty(System.String)">
            <summary>
            If it's null, it return empty string. Otherwise it returns this.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetSingleMatchedValueOrDefault(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Returns the only matched string in the given text using this Regex pattern. 
            Returns null if more than one match found.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.HasMany``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if this collection has more than one item.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.XmlEscape(System.String)">
            <summary>
            Returns a string value that can be saved in xml.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.XmlUnescape(System.String)">
            <summary>
            Returns a string value without any xml-escaped characters.
            </summary>
        </member>
        <member name="F:System.MSharpExtensions.JsUnsafeCharacters">
            <summary>
            Array of unsafe characters that need to be replaced with their character code literals in a JavaScript string.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.JavascriptEncode(System.String)">
            <summary>
            Returns valid JavaScript string content with reserved characters replaced by encoded literals.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToPascalCaseId(System.String)">
            <summary>
            Returns valid PascalCase JavaScript or C# string content.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToCamelCaseId(System.String)">
            <summary>
            Returns valid camelCase javaScript or C# string content.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.CapitaliseFirstLetters(System.String)">
            <summary>
            Converts [hello world] to [Hello World].
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.TrimBefore(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Trims all text before the specified search phrase.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.OrNullIfEmpty(System.String)">
            <summary>
            Returns this string. But if it's String.Empty, it returns NULL.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToProperCase(System.String)">
            <summary>
            Capitalises the first letter and lower-cases the rest.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ReplaceWholeWord(System.String,System.String,System.String,System.Boolean)">
            <summary>
            It will replace all occurances of a specified WHOLE WORD and skip occurances of the word with characters or digits attached to it.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ContainsWholeWord(System.String,System.String,System.Boolean)">
            <summary>
            Returns if a specified WHOLE WORD is found in this text. It skips occurances of the word with characters or digits attached to it.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.EnsureStartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Ensure that this string object starts with a specified other one.
            If it does not, then it prepends that and return the combined text.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.EnsureEndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Ensure that this string object ends with a specified other one.
            If it does not, then it appends that and return the combined text.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts this string to an array of bytes with the given encoding.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WrapIn(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Wraps the content of this string builder with the provided text blocks.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.WrapInLines(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Wraps the content of this string builder with the provided lines of text.
            A line-break will be added to the left element, and another line break will be added before the right element.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RiskDeadlockAndAwaitResult``1(System.Threading.Tasks.Task{``0})">
            <summary>
            It's recommended to use Task.Factory.RunSync() instead.
            If you can't, at then call this while making it explicit that you know what you're doing.
            </summary>        
        </member>
        <member name="M:System.MSharpExtensions.GetAlreadyCompletedResult``1(System.Threading.Tasks.Task{``0})">
            <summary>
            If the task is not completed already it throws an exception warning you to await the task.
            If the task wraps an exception, the wrapped exception will be thrown.
            Otherwise the result will be returned.
            Use this instead of calling the Result property when you know that the result is ready to avoid deadlocks.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RunSync(System.Threading.Tasks.TaskFactory,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs a specified task in a new thread to prevent deadlock (context switch race).
            </summary> 
        </member>
        <member name="M:System.MSharpExtensions.WaitAndThrow(System.Threading.Tasks.Task)">
            <summary>
            Waits for a task to complete, and then if it contains an exception, it will be thrown.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RunSync``1(System.Threading.Tasks.TaskFactory,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs a specified task in a new thread to prevent deadlock (context switch race).
            </summary> 
        </member>
        <member name="M:System.MSharpExtensions.AsTask``2(System.Threading.Tasks.Task{``0})">
            <summary>
            Casts the result type of the input task as if it were covariant.
            </summary>
            <typeparam name="TOriginal">The original result type of the task</typeparam>
            <typeparam name="TTarget">The covariant type to return</typeparam>
            <param name="this">The target task to cast</param>
        </member>
        <member name="M:System.MSharpExtensions.ForLinq``1(System.Threading.Tasks.Task{``0[]})">
            <summary>
            Casts it into a Task of IEnumerable, so the Linq methods can be invoked on it.
            </summary> 
        </member>
        <member name="M:System.MSharpExtensions.ForLinq``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}})">
            <summary>
            Casts it into a Task of IEnumerable, so the Linq methods can be invoked on it.
            </summary> 
        </member>
        <member name="M:System.MSharpExtensions.ForLinq``1(System.Threading.Tasks.Task{System.Collections.Generic.IList{``0}})">
            <summary>
            Casts it into a Task of IEnumerable, so the Linq methods can be invoked on it.
            </summary> 
        </member>
        <member name="M:System.MSharpExtensions.ForLinq``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}})">
            <summary>
            Casts it into a Task of IEnumerable, so the Linq methods can be invoked on it.
            </summary> 
        </member>
        <member name="M:System.MSharpExtensions.Get``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            A shorter more readable alternative to ContinueWith().
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Get``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            A shorter more readable alternative to nested ContinueWith() methods.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>
            A shorter more readable alternative to nested ContinueWith() methods.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ResultOrDefault``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Awaits this task. If the result was an exception,
            it will return the default value of TResult rather than throwing the exception.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ApproxTotalYears(System.TimeSpan)">
            <summary>
            Gets the approximate number of the total years equivalent to this timespan.
            This is not accurate due to unknown leap years in the actual period to which this TimeSpan relates.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToDate(System.TimeSpan)">
            <summary>
            Converts this time to the date time on date of 1900-01-01.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToDate(System.Nullable{System.TimeSpan})">
            <summary>
            Converts this time to the date time on date of 1900-01-01.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToNaturalTime(System.TimeSpan)">
            <summary>
            Gets the natural text for this timespan. For example "2 days, 4 hours and 3 minutes".
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.ToNaturalTime(System.TimeSpan,System.Int32,System.Boolean)">
            <summary>
            Gets the natural text for this timespan. For example "2 days, 4 hours and 3 minutes".
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetElement(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Gets an Element with the specified path. For example "Tree/Branch1/Branch2".
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetNode(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Gets a node with the specified path. For example "Tree/Branch1/Branch2".
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.GetValue``1(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Gets the value of an attribute or inner text of an element with the specified path. For example "Tree/Branch1/Branch2".
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.AddTo``1(``0,System.Xml.Linq.XContainer)">
            <summary>
            Adds this node to a specified container and returns it back to be used as fluent API.
            </summary>
        </member>
        <member name="M:System.MSharpExtensions.RemoveNamespaces(System.Xml.Linq.XElement)">
            <summary>
            Removes all namespaces from this document.
            </summary>
        </member>
        <member name="T:System.Transactions.TransactionExtensions">
            <summary>
            Provides extension methods for transaction classes.
            </summary>
        </member>
        <member name="M:System.Transactions.TransactionExtensions.CreateScope(System.Transactions.IsolationLevel)">
            <summary>
            Creates a new transaction scope with this isolation level.
            </summary>
        </member>
        <member name="M:System.Transactions.TransactionExtensions.CreateScope(System.Transactions.IsolationLevel,System.Transactions.TransactionScopeOption)">
            <summary>
            Creates a new transaction scope with this isolation level.
            </summary> public static TransactionScope CreateScope(this IsolationLevel isolationLevel, TransactionScopeOption scopeOption)
        </member>
        <member name="T:LumenWorks.Framework.IO.Csv.CsvDataReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to CSV data.  
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.DefaultBufferSize">
            <summary>
            Defines the default buffer size.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.DefaultDelimiter">
            <summary>
            Defines the default delimiter character separating each field.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.DefaultQuote">
            <summary>
            Defines the default quote character wrapping every field.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.DefaultEscape">
            <summary>
            Defines the default escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.DefaultComment">
            <summary>
            Defines the default comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.fieldHeaderComparer">
            <summary>
            Contains the field header comparer.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.reader">
            <summary>
            Contains the <see cref="T:TextReader"/> pointing to the CSV file.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.bufferSize">
            <summary>
            Contains the buffer size.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.comment">
            <summary>
            Contains the comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.escape">
            <summary>
            Contains the escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.delimiter">
            <summary>
            Contains the delimiter character separating each field.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.quote">
            <summary>
            Contains the quotation character wrapping every field.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.trimmingOptions">
            <summary>
            Determines which values should be trimmed.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.hasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.initialized">
            <summary>
            Indicates if the class is initialized.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.fieldHeaders">
            <summary>
            Contains the field headers.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.fieldHeaderIndexes">
            <summary>
            Contains the dictionary of field indexes by header. The key is the field name and the value is its index.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.currentRecordIndex">
            <summary>
            Contains the current record index in the CSV file.
            A value of <see cref="M:Int32.MinValue"/> means that the reader has not been initialized yet.
            Otherwise, a negative value means that no record has been read yet.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.nextFieldStart">
            <summary>
            Contains the starting position of the next unread field.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.nextFieldIndex">
            <summary>
            Contains the index of the next unread field.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.fields">
            <summary>
            Contains the array of the field values for the current record.
            A null value indicates that the field have not been parsed.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.fieldCount">
            <summary>
            Contains the maximum number of fields to retrieve for each record.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.buffer">
            <summary>
            Contains the read buffer.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.bufferLength">
            <summary>
            Contains the current read buffer length.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.eof">
            <summary>
            Indicates if the end of the reader has been reached.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.eol">
            <summary>
            Indicates if the last read operation reached an EOL character.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.firstRecordInCache">
            <summary>
            Indicates if the first record is in cache.
            This can happen when initializing a reader with no headers
            because one record must be read to get the field count automatically
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.missingFieldFlag">
            <summary>
            Indicates if one or more field are missing for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.parseErrorFlag">
            <summary>
            Indicates if a parse error occured for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.#ctor(System.IO.TextReader,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.#ctor(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,LumenWorks.Framework.IO.Csv.ValueTrimmingOptions)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimmingOptions">Determines which values should be trimmed.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,LumenWorks.Framework.IO.Csv.ValueTrimmingOptions,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimmingOptions">Determines which values should be trimmed.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="bufferSize"/> must be 1 or more.
            </exception>
        </member>
        <member name="E:LumenWorks.Framework.IO.Csv.CsvDataReader.ParseError">
            <summary>
            Occurs when there is an error while parsing the CSV stream.
            </summary>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.OnParseError(LumenWorks.Framework.IO.Csv.ParseErrorEventArgs)">
            <summary>
            Raises the <see cref="M:ParseError"/> event.
            </summary>
            <param name="e">The <see cref="T:LumenWorks.Framework.IO.Csv.ParseErrorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.Comment">
            <summary>
            Gets the comment character indicating that a line is commented out.
            </summary>
            <value>The comment character indicating that a line is commented out.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.Escape">
            <summary>
            Gets the escape character letting insert quotation characters inside a quoted field.
            </summary>
            <value>The escape character letting insert quotation characters inside a quoted field.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.Delimiter">
            <summary>
            Gets the delimiter character separating each field.
            </summary>
            <value>The delimiter character separating each field.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.Quote">
            <summary>
            Gets the quotation character wrapping every field.
            </summary>
            <value>The quotation character wrapping every field.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.HasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
            <value><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.TrimmingOption">
            <summary>
            Indicates if spaces at the start and end of a field are trimmed.
            </summary>
            <value><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.BufferSize">
            <summary>
            Gets the buffer size.
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.DefaultParseErrorAction">
            <summary>
            Gets or sets the default action to take when a parsing error has occured.
            </summary>
            <value>The default action to take when a parsing error has occured.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.MissingFieldAction">
            <summary>
            Gets or sets the action to take when a field is missing.
            </summary>
            <value>The action to take when a field is missing.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.SupportsMultiline">
            <summary>
            Gets or sets a value indicating if the reader supports multiline fields.
            </summary>
            <value>A value indicating if the reader supports multiline field.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.SkipEmptyLines">
            <summary>
            Gets or sets a value indicating if the reader will skip empty lines.
            </summary>
            <value>A value indicating if the reader will skip empty lines.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.DefaultHeaderName">
            <summary>
            Gets or sets the default header name when it is an empty string or only whitespaces.
            The header index will be appended to the specified name.
            </summary>
            <value>The default header name when it is an empty string or only whitespaces.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.FieldCount">
            <summary>
            Gets the maximum number of fields to retrieve for each record.
            </summary>
            <value>The maximum number of fields to retrieve for each record.</value>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream.
            </summary>
            <value><see langword="true"/> if the current stream position is at the end of the stream; otherwise <see langword="false"/>.</value>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.GetFieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
            <returns>The field headers or an empty array if headers are not supported.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.CurrentRecordIndex">
            <summary>
            Gets the current record index in the CSV file.
            </summary>
            <value>The current record index in the CSV file.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.MissingFieldFlag">
            <summary>
            Indicates if one or more field are missing for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.ParseErrorFlag">
            <summary>
            Indicates if a parse error occured for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.Item(System.Int32,System.String)">
            <summary>
            Gets the field with the specified name and record position. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name and record position.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:EndOfStreamException">
            	Cannot read record at <paramref name="record"/>.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.Item(System.Int32,System.Int32)">
            <summary>
            Gets the field at the specified index and record position.
            </summary>
            <value>
            The field at the specified index and record position.
            A <see langword="null"/> is returned if the field cannot be found for the record.
            </value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:EndOfStreamException">
            	Cannot read record at <paramref name="record"/>.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.Item(System.String)">
            <summary>
            Gets the field with the specified name. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.Item(System.Int32)">
            <summary>
            Gets the field at the specified index.
            </summary>
            <value>The field at the specified index.</value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:InvalidOperationException">
            	No record read yet. Call ReadLine() first.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.EnsureInitialize">
            <summary>
            Ensures that the reader is initialized.
            </summary>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.GetFieldIndex(System.String)">
            <summary>
            Gets the field index for the provided header.
            </summary>
            <param name="header">The header to look for.</param>
            <returns>The field index for the provided header. -1 if not found.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.CopyCurrentRecordTo(System.String[])">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the fields of the current record.</param>	
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.CopyCurrentRecordTo(System.String[],System.Int32)">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:Array"/> that is the destination of the fields of the current record.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="index"/> is les than zero or is equal to or greater than the length <paramref name="array"/>. 
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The number of fields in the record is greater than the available space from <paramref name="index"/> to the end of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.GetCurrentRawData">
            <summary>
            Gets the current raw CSV data.
            </summary>
            <remarks>Used for exception handling purpose.</remarks>
            <returns>The current raw CSV data.</returns>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as white space.
            </summary>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.MoveTo(System.Int64)">
            <summary>
            Moves to the specified record index.
            </summary>
            <param name="record">The record index.</param>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.ParseNewLine(System.Int32@)">
            <summary>
            Parses a new line delimiter.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if a new line delimiter was found; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.IsNewLine(System.Int32)">
            <summary>
            Determines whether the character at the specified position is a new line delimiter.
            </summary>
            <param name="pos">The position of the character to verify.</param>
            <returns>
            	<see langword="true"/> if the character at the specified position is a new line delimiter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.ReadBuffer">
            <summary>
            Fills the buffer with data from the reader.
            </summary>
            <returns><see langword="true"/> if data was successfully read; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.ReadField(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Reads the field at the specified index.
            Any unread fields with an inferior index will also be read as part of the required parsing.
            </summary>
            <param name="field">The field index.</param>
            <param name="initializing">Indicates if the reader is currently initializing.</param>
            <param name="discardValue">Indicates if the value(s) are discarded.</param>
            <returns>
            The field at the specified index. 
            A <see langword="null"/> indicates that an error occured or that the last field has been reached during initialization.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="field"/> is out of range.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	There is no current record.
            </exception>
            <exception cref="T:LumenWorks.Framework.IO.Csv.MissingFieldCsvException">
            	The CSV data appears to be missing a field.
            </exception>
            <exception cref="T:LumenWorks.Framework.IO.Csv.MalformedCsvException">
            	The CSV data appears to be malformed.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.ReadNextRecord">
            <summary>
            Reads the next record.
            </summary>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.ReadNextRecord(System.Boolean,System.Boolean)">
            <summary>
            Reads the next record.
            </summary>
            <param name="onlyReadHeaders">
            Indicates if the reader will proceed to the next record after having read headers.
            <see langword="true"/> if it stops after having read headers; otherwise, <see langword="false"/>.
            </param>
            <param name="skipToNextLine">
            Indicates if the reader will skip directly to the next line without parsing the current one. 
            To be used when an error occurs.
            </param>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.SkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            Skips empty and commented lines.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.DoSkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            <para>Worker method.</para>
            <para>Skips empty and commented lines.</para>
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.SkipWhiteSpaces(System.Int32@)">
            <summary>
            Skips whitespace characters.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.SkipToNextLine(System.Int32@)">
            <summary>
            Skips ahead to the next NewLine character.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.HandleParseError(LumenWorks.Framework.IO.Csv.MalformedCsvException,System.Int32@)">
            <summary>
            Handles a parsing error.
            </summary>
            <param name="error">The parsing error that occured.</param>
            <param name="pos">The current position in the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.HandleMissingField(System.String,System.Int32,System.Int32@)">
            <summary>
            Handles a missing field error.
            </summary>
            <param name="value">The partially parsed value, if available.</param>
            <param name="fieldIndex">The missing field index.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <returns>
            The resulting value according to <see cref="M:MissingFieldAction"/>.
            If the action is set to <see cref="T:MissingFieldAction.TreatAsParseError"/>,
            then the parse error will be handled according to <see cref="P:LumenWorks.Framework.IO.Csv.CsvDataReader.DefaultParseErrorAction"/>.
            </returns>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.ValidateDataReader(LumenWorks.Framework.IO.Csv.CsvDataReader.DataReaderValidations)">
            <summary>
            Validates the state of the data reader.
            </summary>
            <param name="validations">The validations to accomplish.</param>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is invalid when the reader is closed.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.CopyFieldToArray(System.Int32,System.Int64,System.Array,System.Int32,System.Int32)">
            <summary>
            Copy the value of the specified field to an array.
            </summary>
            <param name="field">The index of the field.</param>
            <param name="fieldOffset">The offset in the field value.</param>
            <param name="destinationArray">The destination array where the field value will be copied.</param>
            <param name="destinationOffset">The destination array offset.</param>
            <param name="length">The number of characters to copy from the field value.</param>
            <returns></returns>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.GetEnumerator">
            <summary>
            Returns an <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.System#Collections#Generic#IEnumerable{System#String[]}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.allocStack">
            <summary>
            Contains the stack when the object was allocated.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.isDisposed">
            <summary>
            Contains the disposed status flag.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader._lock">
            <summary>
            Contains the locking object for multi-threading purpose.
            </summary>
        </member>
        <member name="E:LumenWorks.Framework.IO.Csv.CsvDataReader.Disposed">
            <summary>
            Occurs when the instance is disposed of.
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.IsDisposed">
            <summary>
            Gets a value indicating whether the instance has been disposed of.
            </summary>
            <value>
            	<see langword="true"/> if the instance has been disposed of; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.OnDisposed(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Disposed"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of, and if it has, throws an <see cref="T:System.ComponentModel.ObjectDisposedException"/>; otherwise, does nothing.
            </summary>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
            <remarks>
            	Derived classes should call this method at the start of all methods and properties that should not be accessed after a call to <see cref="M:Dispose()"/>.
            </remarks>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.Dispose">
            <summary>
            Releases all resources used by the instance.
            </summary>
            <remarks>
            	Calls <see cref="M:Dispose(Boolean)"/> with the disposing parameter set to <see langword="true"/> to free unmanaged and managed resources.
            </remarks>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the instance is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:LumenWorks.Framework.IO.Csv.CsvDataReader.DataReaderValidations">
            <summary>
            Defines the data reader validations.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.DataReaderValidations.None">
            <summary>
            No validation.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.DataReaderValidations.IsInitialized">
            <summary>
            Validate that the data reader is initialized.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.DataReaderValidations.IsNotClosed">
            <summary>
            Validate that the data reader is not closed.
            </summary>
        </member>
        <member name="T:LumenWorks.Framework.IO.Csv.CsvDataReader.RecordEnumerator">
            <summary>
            Supports a simple iteration over the records of a <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.RecordEnumerator._reader">
            <summary>
            Contains the enumerated <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.RecordEnumerator._current">
            <summary>
            Contains the current record.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.CsvDataReader.RecordEnumerator._currentRecordIndex">
            <summary>
            Contains the current record index.
            </summary>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.RecordEnumerator.#ctor(LumenWorks.Framework.IO.Csv.CsvDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:RecordEnumerator"/> class.
            </summary>
            <param name="reader">The <see cref="T:CsvReader"/> to iterate over.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.RecordEnumerator.Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.RecordEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next record of the CSV.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next record, <see langword="false"/> if the enumerator has passed the end of the CSV.</returns>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.RecordEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first record in the CSV.
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.CsvDataReader.RecordEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.CsvDataReader.RecordEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:LumenWorks.Framework.IO.Csv.ParseErrorAction">
            <summary>
            Specifies the action to take when a parsing error has occured.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.ParseErrorAction.RaiseEvent">
            <summary>
            Raises the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.ParseErrorAction.AdvanceToNextLine">
            <summary>
            Tries to advance to next line.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.ParseErrorAction.ThrowException">
            <summary>
            Throws an exception.
            </summary>
        </member>
        <member name="T:LumenWorks.Framework.IO.Csv.MissingFieldAction">
            <summary>
            Specifies the action to take when a field is missing.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.MissingFieldAction.ParseError">
            <summary>
            Treat as a parsing error.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.MissingFieldAction.ReplaceByEmpty">
            <summary>
            Replaces by an empty value.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.MissingFieldAction.ReplaceByNull">
            <summary>
            Replaces by a null value (<see langword="null"/>).
            </summary>
        </member>
        <member name="T:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.BufferSizeTooSmall">
            <summary>
              Looks up a localized string similar to Buffer size must be 1 or more..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.CannotMovePreviousRecordInForwardOnly">
            <summary>
              Looks up a localized string similar to Cannot move to a previous record in forward-only mode..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.CannotReadRecordAtIndex">
            <summary>
              Looks up a localized string similar to Cannot read record at index &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.EnumerationFinishedOrNotStarted">
            <summary>
              Looks up a localized string similar to Enumeration has either not started or has already finished..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.EnumerationVersionCheckFailed">
            <summary>
              Looks up a localized string similar to Collection was modified; enumeration operation may not execute..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.FieldHeaderNotFound">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; field header not found..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.FieldIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Field index must be included in [0, FieldCount[. Specified field index was : &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.MalformedCsvException">
            <summary>
              Looks up a localized string similar to The CSV appears to be corrupt near record &apos;{0}&apos; field &apos;{1} at position &apos;{2}&apos;. Current raw data : &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.MissingFieldActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported missing field action..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.NoCurrentRecord">
            <summary>
              Looks up a localized string similar to No current record..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.NoHeaders">
            <summary>
              Looks up a localized string similar to The CSV does not have headers (CsvReader.HasHeaders property is false)..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.NotEnoughSpaceInArray">
            <summary>
              Looks up a localized string similar to The number of fields in the record is greater than the available space from index to the end of the destination array..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.ParseErrorActionInvalidInsideParseErrorEvent">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid ParseErrorAction while inside a ParseError event..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.ParseErrorActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported ParseErrorAction..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.ReaderClosed">
            <summary>
              Looks up a localized string similar to This operation is invalid when the reader is closed..
            </summary>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage.RecordIndexLessThanZero">
            <summary>
              Looks up a localized string similar to Record index must be 0 or more..
            </summary>
        </member>
        <member name="T:LumenWorks.Framework.IO.Csv.MalformedCsvException">
            <summary>
            Represents the exception that is thrown when a CSV file is malformed.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.MalformedCsvException.message">
            <summary>
            Contains the message that describes the error.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.MalformedCsvException.rawData">
            <summary>
            Contains the raw data when the error occured.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.MalformedCsvException.currentFieldIndex">
            <summary>
            Contains the current field index.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.MalformedCsvException.currentRecordIndex">
            <summary>
            Contains the current record index.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.MalformedCsvException.currentPosition">
            <summary>
            Contains the current position in the raw data.
            </summary>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.MalformedCsvException.#ctor">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.MalformedCsvException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.MalformedCsvException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.MalformedCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.MalformedCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.MalformedCsvException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MalformedCsvException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.MalformedCsvException.RawData">
            <summary>
            Gets the raw data when the error occured.
            </summary>
            <value>The raw data when the error occured.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.MalformedCsvException.CurrentPosition">
            <summary>
            Gets the current position in the raw data.
            </summary>
            <value>The current position in the raw data.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.MalformedCsvException.CurrentRecordIndex">
            <summary>
            Gets the current record index.
            </summary>
            <value>The current record index.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.MalformedCsvException.CurrentFieldIndex">
            <summary>
            Gets the current field index.
            </summary>
            <value>The current record index.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.MalformedCsvException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>A message that describes the current exception.</value>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.MalformedCsvException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LumenWorks.Framework.IO.Csv.MissingFieldCsvException">
            <summary>
            Represents the exception that is thrown when a there is a missing field in a record of the CSV file.
            </summary>
            <remarks>
            MissingFieldException would have been a better name, but there is already a <see cref="T:System.MissingFieldException"/>.
            </remarks>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.MissingFieldCsvException.#ctor">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.MissingFieldCsvException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.MissingFieldCsvException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.MissingFieldCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.MissingFieldCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.MissingFieldCsvException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LumenWorks.Framework.IO.Csv.ParseErrorEventArgs">
            <summary>
            Provides data for the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:LumenWorks.Framework.IO.Csv.ParseErrorEventArgs._error">
            <summary>
            Contains the error that occured.
            </summary>
        </member>
        <member name="M:LumenWorks.Framework.IO.Csv.ParseErrorEventArgs.#ctor(LumenWorks.Framework.IO.Csv.MalformedCsvException,LumenWorks.Framework.IO.Csv.ParseErrorAction)">
            <summary>
            Initializes a new instance of the ParseErrorEventArgs class.
            </summary>
            <param name="error">The error that occured.</param>
            <param name="defaultAction">The default action to take.</param>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.ParseErrorEventArgs.Error">
            <summary>
            Gets the error that occured.
            </summary>
            <value>The error that occured.</value>
        </member>
        <member name="P:LumenWorks.Framework.IO.Csv.ParseErrorEventArgs.Action">
            <summary>
            Gets or sets the action to take.
            </summary>
            <value>The action to take.</value>
        </member>
        <member name="M:AE.Net.Mail.AlternateViewCollection.OfType(System.String)">
            <summary>
            Find views matching a specific content-type.
            </summary>
            <param name="contentType">The content-type to search for; such as "text/html"</param>
            <returns></returns>
        </member>
        <member name="M:AE.Net.Mail.AlternateViewCollection.OfType(System.Func{System.String,System.Boolean})">
            <summary>
            Find views where the content-type matches a condition
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:AE.Net.Mail.Imap.ModifiedUtf7Encoding.Decode(System.String)">
            <summary>
            Decodes modified UTF-7 according to RFC 3501 5.1.3: Mailbox International Naming Convention
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:AE.Net.Mail.Imap.ModifiedUtf7Encoding.Encode(System.String)">
            <summary>
            Encodes to modified UTF-7 according to RFC 3501 5.1.3: Mailbox International Naming Convention
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:AE.Net.Mail.Utilities.ParseCharsetToEncoding(System.String,System.Text.Encoding)">
            <param name="characterSet">The character set to parse</param>
            <param name="default">The character set to default to if it can't be parsed</param>
            <returns>An encoding which corresponds to the character set</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="characterSet"/> is <see langword="null"/></exception>
        </member>
    </members>
</doc>
